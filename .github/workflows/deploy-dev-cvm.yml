name: Deploy to Development CVM

on:
  push:
    branches:
      - main
    paths:
      - "cvm/docker-compose.yml"
  # for manual trigger from GitHub UI
  workflow_dispatch:

jobs:
  update-dev-cvm:
    name: Update Development CVM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Setup Node.js
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65
        with:
          node-version: "18"

      - name: Install Phala CLI
        run: npm install -g phala

      - name: Deploy to Phala Cloud CVM
        env:
          PHALA_API_TOKEN: ${{ secrets.PHALA_API_TOKEN }}
          PHALA_APP_ID: ${{ secrets.PHALA_DEV_APP_ID }}
        run: |
          # Check if docker-compose.yml exists in the cvm directory
          if [ ! -f "cvm/docker-compose.yml" ]; then
            echo "Error: docker-compose.yml not found in cvm directory"
            exit 1
          fi

          echo "Preparing deployment to Phala Cloud CVM..."

          # Authenticate
          phala auth login "$PHALA_API_TOKEN"

          # Update Dev CVM
          phala cvms upgrade --compose cvm/docker-compose.yml "$PHALA_APP_ID"

          echo "Deployment completed successfully!"

      - name: Verify Deployment
        env:
          PHALA_APP_ID: ${{ secrets.PHALA_DEV_APP_ID }}
        run: |
          # Wait for deployment to complete
          TIMEOUT=300  # 5 minutes timeout
          INTERVAL=10  # Check every 10 seconds
          ELAPSED=30  # Start after initial wait

          echo "Waiting initially for 30 seconds before checking status..."
          sleep 30

          echo "Now monitoring deployment status..."

          while [ $ELAPSED -lt $TIMEOUT ]; do
            # Check deployment status using Phala CLI (grep is due to https://github.com/Phala-Network/phala-cloud-cli/issues/61)
            DEPLOYMENT_STATUS=$(phala cvms get -j "$PHALA_APP_ID" | grep -A 100 "{" | jq -r '.status')

            echo "Current status: $DEPLOYMENT_STATUS (elapsed: ${ELAPSED}s)"

            if [ "$DEPLOYMENT_STATUS" == "running" ]; then
              echo "✅ Deployment verified successfully!"
              exit 0
            elif [ "$DEPLOYMENT_STATUS" != "starting" ]; then
              echo "❌ Deployment failed with unexpected status: $DEPLOYMENT_STATUS"
              exit 1
            fi

            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            echo "⏱️  Waited ${ELAPSED}s so far..."
          done

          # If we reach here, timeout occurred
          echo "❌ Deployment verification timed out after ${TIMEOUT}s. Final status: $DEPLOYMENT_STATUS"
          exit 1
