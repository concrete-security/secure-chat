This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: public/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
app/
  api/
    confidential-chat/
      route.ts
    provider-info/
      route.ts
  confidential-ai/
    page.tsx
  layout.tsx
  page.tsx
components/
  ui/
    accordion.tsx
    badge.tsx
    button.tsx
    card.tsx
    tabs.tsx
  chunk-recovery.tsx
  markdown.tsx
  theme-provider.tsx
lib/
  confidential-chat.ts
  system-prompt.ts
  utils.ts
styles/
  globals.css
.gitignore
components.json
Makefile
next.config.mjs
package.json
people.json
postcss.config.mjs
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/api/confidential-chat/route.ts">
// app/api/confidential-chat/route.ts
// vLLM chat endpoint using OpenAI SDK.

import { NextRequest, NextResponse } from "next/server"
import OpenAI from "openai"

import { systemPrompt } from "@/lib/system-prompt"

type ReasoningPayload = unknown

type Message = {
  role: "system" | "user" | "assistant"
  content: string
  reasoning_content?: ReasoningPayload
}

type ProviderResponseChoice = {
  message?: Message & { content: string; reasoning_content?: ReasoningPayload }
  delta?: Partial<Message> & { content?: string; reasoning_content?: ReasoningPayload }
  text?: string
}

type ProviderResponse = {
  id?: string
  choices?: ProviderResponseChoice[]
  message?: string
  reply?: string
  content?: string
}

const DEFAULT_PROVIDER_API_BASE =
  optionalEnv(process.env.VLLM_BASE_URL) ?? optionalEnv(process.env.NEXT_PUBLIC_VLLM_BASE_URL)
const DEFAULT_MODEL = optionalEnv(process.env.VLLM_MODEL) ?? optionalEnv(process.env.NEXT_PUBLIC_MODEL)
const DEFAULT_SYSTEM_PROMPT = optionalEnv(process.env.DEFAULT_SYSTEM_PROMPT) ?? systemPrompt
const DEFAULT_MAX_TOKENS = parseNumber(process.env.DEFAULT_MAX_TOKENS, 512)
const DEFAULT_TEMPERATURE = parseNumber(process.env.DEFAULT_TEMPERATURE, 0.2)

function createOpenAIClient() {
  return new OpenAI({
    apiKey: process.env.VLLM_API_KEY,
    baseURL: DEFAULT_PROVIDER_API_BASE,
  })
}

function optionalEnv(value: string | undefined): string | undefined {
  if (!value) return undefined
  const trimmed = value.trim()
  return trimmed.length > 0 ? trimmed : undefined
}

function parseNumber(value: string | undefined, fallback: number) {
  if (!value) return fallback
  const parsed = Number(value)
  return Number.isFinite(parsed) ? parsed : fallback
}

function ensureSystemMessage(messages: Message[]) {
  if (messages.some((msg) => msg.role === "system")) return messages
  return [{ role: "system", content: DEFAULT_SYSTEM_PROMPT }, ...messages]
}

function sanitizeMessages(messages: unknown): Message[] {
  if (!Array.isArray(messages)) {
    throw new Error("messages must be an array")
  }

  return messages.map((msg) => {
    if (!msg || typeof msg !== "object") {
      throw new Error("each message must be an object")
    }

    const role = (msg as Message).role
    const content = (msg as Message).content

    if (role !== "system" && role !== "user" && role !== "assistant") {
      throw new Error("invalid message role")
    }

    if (typeof content !== "string" || content.trim().length === 0) {
      throw new Error("message content must be a non-empty string")
    }

    return {
      role,
      content,
    }
  })
}

function getProviderResponseText(payload: ProviderResponse): string | null {
  if (!payload) {
    return null
  }

  if (typeof payload.message === "string" && payload.message.trim().length > 0) {
    return payload.message.trim()
  }

  if (typeof payload.reply === "string" && payload.reply.trim().length > 0) {
    return payload.reply.trim()
  }

  if (typeof payload.content === "string" && payload.content.trim().length > 0) {
    return payload.content.trim()
  }

  const firstChoice = payload.choices?.[0]
  if (firstChoice?.message?.content) {
    return firstChoice.message.content.trim()
  }

  if (firstChoice?.text) {
    return firstChoice.text.trim()
  }

  if (firstChoice?.delta?.content) {
    return firstChoice.delta.content.trim()
  }

  return null
}

function extractContentDelta(content: unknown): string {
  if (!content) return ""
  if (typeof content === "string") return content
  if (Array.isArray(content)) {
    return content
      .map((part) => {
        if (!part) return ""
        if (typeof part === "string") return part
        if (typeof part === "object" && typeof (part as { text?: string }).text === "string") {
          return (part as { text: string }).text
        }
        return ""
      })
      .join("")
  }
  if (typeof content === "object" && typeof (content as { text?: string }).text === "string") {
    return (content as { text: string }).text
  }
  return ""
}

function normalizeReasoning(value: unknown): string {
  if (!value) return ""
  if (typeof value === "string") return value
  if (Array.isArray(value)) {
    return value.map((item) => normalizeReasoning(item)).join("")
  }
  if (typeof value === "object") {
    const typed = value as Record<string, unknown>
    if (typeof typed.text === "string") return typed.text
    if (typeof typed.reasoning === "string") return typed.reasoning
    if (Array.isArray(typed.content)) return typed.content.map((item) => normalizeReasoning(item)).join("")
    if (typeof typed.content === "string") return typed.content
    if (typeof typed.output_text === "string") return typed.output_text
  }
  return ""
}

function extractReasoningDelta(delta: unknown): string {
  if (!delta || typeof delta !== "object") return ""
  const typed = delta as Record<string, unknown>
  const reasoningSource = typed.reasoning_content ?? typed.reasoning
  return normalizeReasoning(reasoningSource)
}

function computeRemainder(full: string, seen: string): string {
  if (!full) return ""
  if (!seen) return full
  if (full.startsWith(seen)) {
    return full.slice(seen.length)
  }
  return full
}

function extractReasoningFromChoice(choice?: ProviderResponseChoice): string | null {
  if (!choice) return null
  const fromMessage = normalizeReasoning(choice.message?.reasoning_content)
  if (fromMessage) return fromMessage
  const fromChoice = normalizeReasoning((choice as unknown as Record<string, unknown>)?.reasoning_content)
  if (fromChoice) return fromChoice
  return null
}

function extractErrorMessage(error: unknown): string {
  if (!error) return "Unknown error"
  if (typeof error === "string") {
    return error
  }

  const maybeRecord = error as Record<string, unknown>
  const nestedError = maybeRecord?.error

  if (nestedError && typeof nestedError === "object") {
    const nestedMessage = (nestedError as Record<string, unknown>)?.message
    if (typeof nestedMessage === "string" && nestedMessage.trim().length > 0) {
      return nestedMessage.trim()
    }
  }

  const directMessage = maybeRecord?.message
  if (typeof directMessage === "string" && directMessage.trim().length > 0) {
    return directMessage.trim()
  }

  if (error instanceof Error && typeof error.message === "string" && error.message.trim().length > 0) {
    return error.message.trim()
  }

  return "Unknown error"
}

type ProviderErrorInfo = {
  status: number
  message: string
}

function interpretProviderError(message: string): ProviderErrorInfo | null {
  const trimmed = message.trim()
  if (!trimmed) {
    return null
  }

  const lower = trimmed.toLowerCase()

  const maxTokenPatterns = [
    /max_tokens must be at least 1/,
    /max tokens must be greater than 0/,
    /maximum context length/,
    /prompt is too long/,
    /context length exceeded/,
  ]

  if (maxTokenPatterns.some((pattern) => pattern.test(lower))) {
    return {
      status: 400,
      message:
        "This request is larger than the model can process. Try removing some content.",
    }
  }

  return null
}

export async function POST(req: NextRequest) {
  try {
    // Parse body
    const body = await req.json();

    // Sanitize + ensure system message
    const sanitizedMessages = ensureSystemMessage(sanitizeMessages(body?.messages));

    const model =
      typeof body?.model === "string" && body.model.trim().length > 0 ? body.model.trim() : DEFAULT_MODEL;
    const temperature = typeof body?.temperature === "number" ? body.temperature : DEFAULT_TEMPERATURE;
    const max_tokens = typeof body?.max_tokens === "number" ? body.max_tokens : DEFAULT_MAX_TOKENS;
    const stream = body?.stream !== false;
    const reasoningEffortValue = typeof body?.reasoning_effort === "string" ? body.reasoning_effort.toLowerCase() : undefined;
    const reasoningEffort = reasoningEffortValue && ["low", "medium", "high"].includes(reasoningEffortValue)
      ? (reasoningEffortValue as "low" | "medium" | "high")
      : undefined;
    const cacheSalt = typeof body?.cache_salt === "string" && body.cache_salt.trim().length > 0 ? body.cache_salt.trim() : undefined;

    if (!DEFAULT_PROVIDER_API_BASE) {
      return NextResponse.json({ error: "VLLM_BASE_URL is not configured" }, { status: 500 });
    }

    if (!process.env.VLLM_API_KEY) {
      return NextResponse.json({ error: "VLLM_API_KEY is not configured" }, { status: 500 });
    }

    if (!model) {
      return NextResponse.json({ error: "No model specified. Set VLLM_MODEL or provide model in request." }, { status: 400 });
    }

    const client = createOpenAIClient()
    if (!stream) {
      const request: Record<string, unknown> = {
        model,
        messages: sanitizedMessages,
        temperature,
        max_tokens,
        stream: false,
      };
      const extraBody: Record<string, unknown> = {};
      if (reasoningEffort) {
        extraBody.reasoning_effort = reasoningEffort;
      }
      if (cacheSalt) {
        extraBody.cache_salt = cacheSalt;
      }
      if (Object.keys(extraBody).length > 0) {
        request.extra_body = extraBody;
      }

      const resp = await client.chat.completions.create(request);

      const first = resp.choices?.[0];
      const message =
        first?.message?.content ??
        getProviderResponseText(resp as unknown as ProviderResponse) ??
        JSON.stringify(resp);

      const reasoning_content = extractReasoningFromChoice(first);
      const finish_reason = first?.finish_reason ?? undefined;

      return NextResponse.json({ message, raw: resp, reasoning_content, finish_reason, reasoning_effort: reasoningEffort }, { status: 200 });
    }

    const streamRequest: Record<string, unknown> = {
      model,
      messages: sanitizedMessages,
      temperature,
      max_tokens,
      stream: true,
    };
    const streamExtraBody: Record<string, unknown> = {};
    if (reasoningEffort) {
      streamExtraBody.reasoning_effort = reasoningEffort;
    }
    if (cacheSalt) {
      streamExtraBody.cache_salt = cacheSalt;
    }
    if (Object.keys(streamExtraBody).length > 0) {
      streamRequest.extra_body = streamExtraBody;
    }

    const completion = await client.chat.completions.create(streamRequest);

    const encoder = new TextEncoder()
    let accumulatedContent = ""
    let accumulatedReasoning = ""
    let finishReason: string | null = null

    const readable = new ReadableStream<Uint8Array>({
      async start(controller) {
        try {
          for await (const chunk of completion) {
            const choice = chunk.choices?.[0]
            if (!choice) {
              continue
            }

            const deltaContent = extractContentDelta(choice.delta?.content)
            const messageContent = extractContentDelta(choice.message?.content)
            const reasoningDelta = extractReasoningDelta(choice.delta)
            const reasoningMessageFull = normalizeReasoning(choice.message?.reasoning_content)

            if (choice.finish_reason && !finishReason) {
              finishReason = choice.finish_reason
            }

            const contentPiece = deltaContent || computeRemainder(messageContent, accumulatedContent)
            const reasoningPiece = reasoningDelta || computeRemainder(reasoningMessageFull, accumulatedReasoning)

            if (contentPiece) {
              accumulatedContent += contentPiece
              controller.enqueue(encoder.encode(`${JSON.stringify({ type: "delta", content: contentPiece })}\n`))
            }

            if (reasoningPiece) {
              accumulatedReasoning += reasoningPiece
              controller.enqueue(encoder.encode(`${JSON.stringify({ type: "reasoning_delta", reasoning_content: reasoningPiece })}\n`))
            }
          }

          controller.enqueue(
            encoder.encode(
              `${JSON.stringify({
                type: "done",
                content: accumulatedContent,
                reasoning_content: accumulatedReasoning || undefined,
                finish_reason: finishReason || undefined,
              })}\n`
            )
          )
          controller.close()
        } catch (err) {
          console.error("Confidential chat stream failed", err)
          const rawMessage = extractErrorMessage(err)
          const interpreted = interpretProviderError(rawMessage)
          const userMessage = interpreted?.message ?? rawMessage
          controller.enqueue(encoder.encode(`${JSON.stringify({ type: "error", error: userMessage })}\n`))
          controller.close()
        }
      },
    })

    return new Response(readable, {
      status: 200,
      headers: {
        "Content-Type": "application/x-ndjson",
        "Cache-Control": "no-cache, no-transform",
      },
    })
  } catch (error: unknown) {
    console.error("Confidential chat failed", error)
    const rawMessage = extractErrorMessage(error)
    const interpreted = interpretProviderError(rawMessage)
    const status = interpreted?.status ?? 500
    const userMessage = interpreted?.message ?? rawMessage
    return NextResponse.json({ error: userMessage }, { status })
  }
}
</file>

<file path="app/api/provider-info/route.ts">
import { NextResponse } from "next/server"

type ProviderInfoResponse = {
  baseUrl?: string
  host?: string
  displayName?: string
  model?: string
}

export function GET() {
  const baseUrl = optionalEnv(process.env.VLLM_BASE_URL) ?? optionalEnv(process.env.NEXT_PUBLIC_VLLM_BASE_URL)
  const model = optionalEnv(process.env.VLLM_MODEL) ?? optionalEnv(process.env.NEXT_PUBLIC_VLLM_MODEL)
  const displayName =
    optionalEnv(process.env.NEXT_PUBLIC_VLLM_PROVIDER_NAME) ??
    optionalEnv(process.env.VLLM_PROVIDER_NAME) ??
    model ??
    undefined

  const sanitizedBaseUrl = sanitizeBaseUrl(baseUrl)
  const host = extractHost(sanitizedBaseUrl ?? baseUrl)

  const payload: ProviderInfoResponse = {}
  if (sanitizedBaseUrl) payload.baseUrl = sanitizedBaseUrl
  if (host) payload.host = host
  if (displayName) payload.displayName = displayName
  if (model) payload.model = model

  return NextResponse.json(payload, {
    headers: {
      "Cache-Control": "no-store",
    },
  })
}

function optionalEnv(value: string | undefined) {
  if (!value) return undefined
  const trimmed = value.trim()
  return trimmed.length > 0 ? trimmed : undefined
}

function sanitizeBaseUrl(value: string | null | undefined) {
  if (!value) return undefined
  try {
    const url = new URL(value)
    url.username = ""
    url.password = ""
    url.hash = ""
    url.search = ""
    return url.toString()
  } catch {
    return value
  }
}

function extractHost(value: string | null | undefined) {
  if (!value) return undefined
  try {
    return new URL(value).host
  } catch {
    return undefined
  }
}
</file>

<file path="app/confidential-ai/page.tsx">
"use client"

import { useState, FormEvent, KeyboardEvent, useMemo, useRef, useEffect, useCallback } from "react"

import Link from "next/link"
import Image from "next/image"
import { useTheme } from "next-themes"
import { ArrowDown, Send, Lock, Shield, ShieldCheck, Cpu, CheckCircle2, Bot, Globe, Paperclip, FileText, X, Sparkles, ChevronDown, Key } from "lucide-react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { streamConfidentialChat, confidentialChatConfig } from "@/lib/confidential-chat"
import { Markdown } from "@/components/markdown"
import { cn } from "@/lib/utils"


type Message = {
  role: "user" | "assistant"
  content: string
  attachments?: UploadedFile[]
  reasoning_content?: string
  streaming?: boolean
  finishReason?: string
}
type UploadedFile = { name: string; content: string; size: number; type: string }

type ProviderMetadata = {
  baseUrl?: string | null
  host?: string | null
  displayName?: string | null
  model?: string | null
}

type HostParts = {
  host: string
  hostname: string
}

function normalize(value?: string | null): string | null {
  if (!value) return null
  const trimmed = value.trim()
  return trimmed.length > 0 ? trimmed : null
}

function parseHost(value?: string | null): HostParts | null {
  if (!value) return null
  try {
    const candidate = value.includes("://") ? value : `http://${value}`
    const url = new URL(candidate)
    const host = url.port ? `${url.hostname}:${url.port}` : url.hostname
    return { host, hostname: url.hostname }
  } catch {
    return null
  }
}

function isLoopbackHostname(hostname?: string | null) {
  if (!hostname) return false
  const normalized = hostname.toLowerCase()
  if (normalized === "localhost" || normalized === "::1" || normalized === "0.0.0.0") {
    return true
  }
  if (normalized.startsWith("127.")) {
    return true
  }
  return false
}

function sanitizeDisplayName(displayName: string | null) {
  if (!displayName) return null
  return displayName.toLowerCase().includes("vllm") ? null : displayName
}

function buildGreeting(model: string | null, displayName: string | null, host: string | null) {
  void model
  void displayName
  void host
  return "Secure channel with Umbra AI. How can I help you today?"
}

function truncateMiddle(str: string, maxLength: number = 40): string {
  if (str.length <= maxLength) return str
  const ellipsis = "..."
  const charsToShow = maxLength - ellipsis.length
  const frontChars = Math.ceil(charsToShow / 2)
  const backChars = Math.floor(charsToShow / 2)
  return str.slice(0, frontChars) + ellipsis + str.slice(-backChars)
}

const THEME_OPTIONS = [
  { value: "light", label: "Light" },
  { value: "dark", label: "Dark" },
] as const

export default function ConfidentialAIPage() {
  const envProviderApiBase = normalize(confidentialChatConfig.providerApiBase)
  const envProviderModel = normalize(confidentialChatConfig.providerModel)
  const envProviderDisplayName = normalize(confidentialChatConfig.providerName) ?? envProviderModel

  const [providerMetadata, setProviderMetadata] = useState<ProviderMetadata | null>(null)

  const metadataBase = normalize(providerMetadata?.baseUrl)
  const metadataModel = normalize(providerMetadata?.model)
  const metadataDisplayName = normalize(providerMetadata?.displayName)
  const explicitMetadataHost = normalize(providerMetadata?.host)

  const providerApiBase = envProviderApiBase ?? metadataBase ?? null
  const providerModel = envProviderModel ?? metadataModel ?? null
  const providerDisplayName =
    envProviderDisplayName ?? metadataDisplayName ?? providerModel ?? metadataModel ?? null
  const sanitizedDisplayName = sanitizeDisplayName(providerDisplayName)

  const envHostParts = useMemo(() => parseHost(envProviderApiBase), [envProviderApiBase])
  const metadataHostParts = useMemo(
    () => parseHost(explicitMetadataHost ?? metadataBase),
    [explicitMetadataHost, metadataBase]
  )

  const providerHostParts = useMemo(() => {
    const candidates: HostParts[] = []
    if (metadataHostParts) candidates.push(metadataHostParts)
    if (envHostParts) candidates.push(envHostParts)
    if (providerApiBase) {
      const fromApiBase = parseHost(providerApiBase)
      if (fromApiBase) {
        const exists = candidates.some((candidate) => candidate.host === fromApiBase.host)
        if (!exists) {
          candidates.push(fromApiBase)
        }
      }
    }

    if (candidates.length === 0) {
      return null
    }

    const nonLoopback = candidates.find((candidate) => !isLoopbackHostname(candidate.hostname))
    return nonLoopback ?? candidates[0]
  }, [metadataHostParts, envHostParts, providerApiBase])

  const providerHost = providerHostParts?.host ?? null

  const assistantName = (() => {
    const candidate = sanitizedDisplayName ?? providerModel ?? null
    if (!candidate) return "Umbra"
    return /concrete/i.test(candidate) ? "Umbra" : candidate
  })()

  const providerTunnelBase =
    (providerHostParts &&
      metadataHostParts &&
      providerHostParts.host === metadataHostParts.host &&
      metadataBase) ||
    (providerHostParts && envHostParts && providerHostParts.host === envHostParts.host && envProviderApiBase) ||
    metadataBase ||
    envProviderApiBase ||
    null

  const primaryConnectionSummary = providerModel
    ? `Connected to model ${providerModel}${providerHost ? ` via ${providerHost}` : ""}.`
    : assistantName
      ? `Connected to ${assistantName}${providerHost ? ` via ${providerHost}` : ""}.`
      : providerHost
        ? `Connected via ${providerHost}.`
        : null

  const connectionSummarySegments = [
    primaryConnectionSummary,
    providerTunnelBase ? `Requests tunnel through ${providerTunnelBase}.` : null,
  ].filter((segment): segment is string => Boolean(segment))

  const connectionSummary = connectionSummarySegments.length > 0
    ? connectionSummarySegments.join(" ")
    : "Demo mode: configure a confidential provider to enable remote inference."

  const [messages, setMessages] = useState<Message[]>(() => [
    {
      role: "assistant",
      content: buildGreeting(providerModel, assistantName, providerHost),
    },
  ])

  useEffect(() => {
    const controller = new AbortController()

    const loadProviderMetadata = async () => {
      try {
        const response = await fetch("/api/provider-info", { cache: "no-store", signal: controller.signal })
        if (!response.ok || controller.signal.aborted) return

        const payload = (await response.json()) as ProviderMetadata
        if (!controller.signal.aborted) {
          setProviderMetadata(payload)
        }
      } catch (error) {
        if (error instanceof DOMException && error.name === "AbortError") {
          return
        }
        console.warn("Failed to load provider metadata", error)
      }
    }

    void loadProviderMetadata()

    return () => {
      controller.abort()
    }
  }, [])

  useEffect(() => {
    setMessages((previous) => {
      if (previous.length === 0) return previous
      if (previous.some((message) => message.role === "user")) return previous

      const [first, ...rest] = previous
      if (first.role !== "assistant") return previous

      const updatedGreeting = buildGreeting(providerModel, assistantName, providerHost)
      if (first.content === updatedGreeting) return previous

      return [{ ...first, content: updatedGreeting }, ...rest]
    })
  }, [providerModel, assistantName, providerHost])
  const [input, setInput] = useState("")
  const [encrypting, setEncrypting] = useState(false)
  const [cipherPreview, setCipherPreview] = useState<string | null>(null)
  const [isSending, setIsSending] = useState(false)
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([])
  const [reasoningEffort, setReasoningEffort] = useState<"low" | "medium" | "high">("medium")
  const fileInputRef = useRef<HTMLInputElement>(null)

  // ref that will serve as the "scroll anchor" for the chat bottom
  const messagesEndRef = useRef<HTMLDivElement | null>(null)
  const messagesContainerRef = useRef<HTMLDivElement | null>(null)
  const lastScrollTopRef = useRef(0)
  const isProgrammaticScrollRef = useRef(false)

  // Track whether we should auto-scroll (only after sending/receiving a message)
  const [shouldScroll, setShouldScroll] = useState(false)
  const [reasoningOpen, setReasoningOpen] = useState<Record<number, boolean>>({})
  const [isPinnedToBottom, setIsPinnedToBottom] = useState(true)
  const [hasNewMessages, setHasNewMessages] = useState(false)
  const [autoScrollEnabled, setAutoScrollEnabled] = useState(true)
  const { theme: currentTheme, resolvedTheme, setTheme } = useTheme()
  const [themeReady, setThemeReady] = useState(false)
  const [cacheSalt, setCacheSalt] = useState<string | null>(null)

  useEffect(() => {
    setThemeReady(true)
  }, [])

  useEffect(() => {
    const CACHE_SALT_KEY = "confidential-ai-cache-salt"
    let salt = localStorage.getItem(CACHE_SALT_KEY)
    if (!salt) {
      salt = crypto.randomUUID()
      localStorage.setItem(CACHE_SALT_KEY, salt)
    }
    setCacheSalt(salt)
  }, [])

  const activeTheme = (currentTheme === "system" ? resolvedTheme : currentTheme) ?? "light"
  const isStreaming = useMemo(() => messages.some((message) => message.streaming), [messages])


  const toHexPreview = (s: string) => {
    try {
      const hex = Array.from(s)
        .map((ch) => ch.charCodeAt(0).toString(16).padStart(2, "0"))
        .join("")
        .slice(0, 48)
      return `0x${hex}${s.length > 24 ? "…" : ""}`
    } catch {
      return "0x…"
    }
  }
  // Upload files
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (!files) return

    for (let i = 0; i < files.length; i++) {
      const file = files[i]

      // Check file size (limit to 100MB for all files)
      const maxSize = 100 * 1024 * 1024 
      if (file.size > maxSize) {
        const maxSizeText = '100MB'
        alert(`File "${file.name}" is too large. Maximum size is ${maxSizeText}.`)
        continue
      }

      try {
        let content: string

        if (file.type === 'application/pdf') {
          // ici
          content = await extractTextFromPDF(file)
        } else {
          content = await file.text()
        }

        const uploadedFile: UploadedFile = {
          name: file.name,
          content,
          size: file.size,
          type: file.type || 'text/plain'
        }

        setUploadedFiles(prev => [...prev, uploadedFile])
      } catch (error) {
        console.error('Error reading file:', error)
        alert(`Failed to read file "${file.name}": ${error instanceof Error ? error.message : 'Unknown error'}`)
      }
    }

    // Reset the input
    if (fileInputRef.current) {
      fileInputRef.current.value = ''
    }
  }

  const removeFile = (index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index))
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const countWords = (text: string) => {
    return text.trim().split(/\s+/).filter(word => word.length > 0).length
  }

  const formatWordCount = (count: number) => {
    return count === 1 ? '1 word' : `${count} words`
  }
  // Extract only text
  const extractTextFromPDF = async (file: File): Promise<string> => {
    try {

      const pdfjsLibModule = await import(/* webpackIgnore: true */ "/pdfjs/pdf.mjs")
      const pdfjsLib = (pdfjsLibModule as unknown as { default?: any }).default ?? (window as any).pdfjsLib ?? pdfjsLibModule

      pdfjsLib.GlobalWorkerOptions.workerSrc = "/pdfjs/pdf.worker.mjs"

      const arrayBuffer = await file.arrayBuffer()
      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise
      let text = ''

      for (let i = 1; i <= pdf.numPages; i++) {
        const page = await pdf.getPage(i)
        const textContent = await page.getTextContent()
        const pageText = textContent.items
          .map((item: any) => ("str" in item ? item.str : ""))
          .join(' ')
        text += pageText + '\n'
      }
      return text.trim()
    } catch (error) {
      console.error('Error extracting text from PDF:', error)
      throw new Error('Failed to extract text from PDF')
    }
  }


  const sendMessage = async () => {
    if (isSending) return
    const text = input.trim()
    if (!text && uploadedFiles.length === 0) return

    // Create message content including file contents
    let messageContent = text
    if (uploadedFiles.length > 0) {
      const fileContents = uploadedFiles.map(file =>
        `\n\n[File: ${file.name}]\n${file.content}`
      ).join('')
      messageContent = text + fileContents
    }

    const userMessage: Message = {
      role: "user",
      content: messageContent,
      attachments: uploadedFiles.length > 0 ? [...uploadedFiles] : undefined,
    }

    const conversationBeforeAssistant: Message[] = [...messages, userMessage]
    const assistantPlaceholder: Message = {
      role: "assistant",
      content: "",
      streaming: true,
    }

    const conversationWithAssistant: Message[] = [...conversationBeforeAssistant, assistantPlaceholder]
    const assistantIndex = conversationWithAssistant.length - 1

    setEncrypting(true)
    setCipherPreview(toHexPreview(messageContent))
    setMessages(conversationWithAssistant)
    setReasoningOpen((prev) => ({ ...prev, [assistantIndex]: false }))
    setInput("")
    setUploadedFiles([])
    setIsSending(true)

    // Trigger scroll only when a new message is sent by the user
    setShouldScroll(true)

    const sanitizedHistory = conversationBeforeAssistant.map((m) => ({ role: m.role, content: m.content }))

    const updateAssistantMessage = (patch: Partial<Message>) => {
      setMessages((prev) => {
        if (assistantIndex < 0 || assistantIndex >= prev.length) return prev
        const next = [...prev]
        const existing = next[assistantIndex]
        if (!existing) return prev
        next[assistantIndex] = { ...existing, ...patch }
        return next
      })
    }

    try {
      let streamedContent = ""
      let streamedReasoning = ""
      let finishReason: string | undefined

      for await (const chunk of streamConfidentialChat(
        {
          messages: sanitizedHistory,
          ...(providerModel ? { model: providerModel } : {}),
          reasoning_effort: reasoningEffort,
          ...(cacheSalt ? { cache_salt: cacheSalt } : {}),
        },
        {}
      )) {
        if (chunk.type === "delta" && chunk.content) {
          streamedContent += chunk.content
          updateAssistantMessage({ content: streamedContent })
          setShouldScroll(true)
        }

        if (chunk.type === "reasoning_delta" && chunk.reasoning_content) {
          streamedReasoning += chunk.reasoning_content
          updateAssistantMessage({ reasoning_content: streamedReasoning })
        }

        if (chunk.type === "error") {
          throw new Error(chunk.error)
        }

        if (chunk.type === "done") {
          if (chunk.content) {
            streamedContent = chunk.content
          }
          if (chunk.reasoning_content) {
            streamedReasoning = chunk.reasoning_content
          }
          if (chunk.finish_reason) {
            finishReason = chunk.finish_reason
          }
        }
      }

      const finalContent = streamedContent.trim()
      const finalReasoning = streamedReasoning.trim()

      updateAssistantMessage({
        content: finalContent || "No response received from the confidential service.",
        reasoning_content: finalReasoning || undefined,
        streaming: false,
        finishReason,
      })
      setShouldScroll(true)
    } catch (error) {
      console.error("Confidential chat request failed", error)
      const fallback = error instanceof Error && error.message ? error.message : "Please try again later."
      updateAssistantMessage({
        content: `We couldn't reach the confidential service right now. ${fallback}`,
        streaming: false,
        reasoning_content: undefined,
        finishReason: undefined,
      })
      setShouldScroll(true)
    } finally {
      setIsSending(false)
      setEncrypting(false)
      setCipherPreview(null)
    }
  }

  const onSubmit = (e: FormEvent) => {
    e.preventDefault()
    void sendMessage()
  }

  const onKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      void sendMessage()
    }
  }

  useEffect(() => {
    const container = messagesContainerRef.current
    if (!container) return

    const handleUserInteraction = () => {
      if (!isProgrammaticScrollRef.current) {
        setAutoScrollEnabled(false)
      }
    }

    const handleScroll = () => {
      const { scrollTop, clientHeight, scrollHeight } = container
      const distanceFromBottom = Math.max(0, scrollHeight - (scrollTop + clientHeight))
      const tolerance = 24
      const isAtBottom = distanceFromBottom <= tolerance
      lastScrollTopRef.current = scrollTop

      setIsPinnedToBottom(isAtBottom)
      if (isAtBottom) {
        setHasNewMessages(false)
        setAutoScrollEnabled(true)
      }
    }

    handleScroll()
    container.addEventListener("scroll", handleScroll, { passive: true })
    container.addEventListener("wheel", handleUserInteraction, { passive: true })
    container.addEventListener("touchstart", handleUserInteraction, { passive: true })
    
    return () => {
      container.removeEventListener("scroll", handleScroll)
      container.removeEventListener("wheel", handleUserInteraction)
      container.removeEventListener("touchstart", handleUserInteraction)
    }
  }, [])

  const scrollToBottom = useCallback((behavior: ScrollBehavior = "smooth") => {
    isProgrammaticScrollRef.current = true

    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTo({
        top: messagesContainerRef.current.scrollHeight,
        behavior,
      })
    }

    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior, block: "end" })
    }

    window.requestAnimationFrame(() => {
      if (messagesContainerRef.current) {
        lastScrollTopRef.current = messagesContainerRef.current.scrollTop
      }
      window.requestAnimationFrame(() => {
        isProgrammaticScrollRef.current = false
      })
    })

    setHasNewMessages(false)
    setIsPinnedToBottom(true)
    setAutoScrollEnabled(true)
  }, [])

  // Only auto-scroll when user is already viewing the newest messages
  useEffect(() => {
    if (!shouldScroll) return

    if (autoScrollEnabled) {
      const behavior: ScrollBehavior = messages.length <= 2 || isStreaming ? "auto" : "smooth"
      scrollToBottom(behavior)
    } else {
      setHasNewMessages(true)
    }

    setShouldScroll(false)
  }, [messages, shouldScroll, autoScrollEnabled, scrollToBottom, isStreaming])

  useEffect(() => {
    if (isPinnedToBottom || autoScrollEnabled) {
      scrollToBottom("smooth")
    }
  }, [reasoningOpen, isPinnedToBottom, autoScrollEnabled, scrollToBottom])

  const showScrollToLatest = !isPinnedToBottom && (!autoScrollEnabled || hasNewMessages)

  return (
    <div className="h-[100dvh] flex flex-col overflow-hidden bg-muted/20">
      <script src="/pdfjs/pdf.mjs" type="module" />
      <header className="border-b bg-background/80 backdrop-blur supports-[backdrop-filter]:bg-background/60 shrink-0">
        <div className="container flex h-14 items-center justify-between gap-3 px-4 md:px-6">
          <div className="inline-flex items-center gap-2 text-sm font-semibold text-foreground">
            <Lock className="size-4 text-primary" />
            <span>Confidential Space</span>
          </div>
          <div className="flex items-center gap-3">
            {themeReady && (
              <div className="flex items-center gap-1 rounded-full border border-border/60 bg-background/80 p-0.5 text-xs shadow-sm">
                {THEME_OPTIONS.map((option) => {
                  const isActive = activeTheme === option.value
                  return (
                    <button
                      key={option.value}
                      type="button"
                      onClick={() => setTheme(option.value)}
                      className={cn(
                        "flex items-center gap-1 rounded-full px-3 py-1 capitalize transition",
                        isActive
                          ? "bg-primary text-primary-foreground shadow-sm"
                          : "text-muted-foreground hover:text-foreground"
                      )}
                    >
                      {option.label}
                    </button>
                  )
                })}
              </div>
            )}
            <Link href="/" className="inline-flex items-center gap-2 font-semibold">
              <Image src="/logo.png" alt="Concrete AI logo" width={20} height={20} className="rounded-sm" />
              <span>Confidential AI</span>
            </Link>
          </div>
        </div>
      </header>
      <main className="flex-1 flex flex-col min-h-0">
        <div className="container flex-1 flex flex-col min-h-0 px-4 md:px-6 py-6 lg:py-10">
          <div className="mx-auto flex max-w-7xl flex-1 flex-col min-h-0 gap-6 lg:gap-8" aria-label="Confidential space">
            <div className="grid gap-6 flex-1 min-h-0 lg:grid-cols-[minmax(320px,1fr)_minmax(0,2.2fr)] xl:grid-cols-[minmax(340px,1fr)_minmax(0,2.6fr)]">
              <section className="relative flex flex-1 flex-col min-h-0 order-1 lg:order-2">
                <div className="rounded-3xl bg-gradient-to-br from-primary/25 via-primary/45 to-primary/25 p-[1px] shadow-lg flex-1 flex flex-col min-h-0">
                  <div className="flex flex-1 flex-col min-h-0 rounded-[calc(1.5rem-1px)] bg-background/70 backdrop-blur supports-[backdrop-filter]:bg-background/60">
                    <div className="flex flex-wrap items-center justify-between gap-3 border-b border-border/60 px-5 py-4 text-xs font-medium uppercase tracking-wide text-muted-foreground shrink-0">
                      <div className="flex flex-wrap items-center gap-2">
                        <span className="inline-flex items-center gap-2 rounded-full bg-primary/10 px-3 py-1 text-primary">
                          <Lock className="size-3.5" />
                          Secure session
                        </span>
                        {encrypting && cipherPreview && (
                          <>
                            <span className="opacity-60">•</span>
                            <span className="rounded-full bg-muted/60 px-3 py-1 font-mono text-[10px] uppercase tracking-widest text-muted-foreground">
                              Encrypting {cipherPreview}
                            </span>
                          </>
                        )}
                      </div>
                      <div className="inline-flex items-center gap-2 rounded-full bg-muted/40 px-3 py-1 text-[11px] font-semibold text-muted-foreground">
                        <Sparkles className="size-3.5 text-primary" />
                        <span>{reasoningEffort.charAt(0).toUpperCase() + reasoningEffort.slice(1)} reasoning</span>
                      </div>
                    </div>
                    <Card className="flex flex-1 flex-col min-h-0 rounded-b-[1.4375rem] border-0 bg-background/60 shadow-none supports-[backdrop-filter]:bg-background/50 overflow-hidden">
                      <CardContent className="flex flex-1 flex-col min-h-0 p-0">
                        <div className="relative flex flex-1 flex-col min-h-0 overflow-hidden">
                          <div
                            ref={messagesContainerRef}
                            className="flex-1 min-w-0 overflow-y-auto px-5 py-6 space-y-6 sm:px-6"
                            role="log"
                            aria-live="polite"
                            aria-label="Confidential space transcript"
                          >
                            {messages.map((m, i) => {
                              const isUser = m.role === "user"
                              const isAssistant = !isUser
                              const isReasoningOpen = reasoningOpen[i] ?? false
                              const reasoningAvailable =
                                typeof m.reasoning_content === "string" && m.reasoning_content.trim().length > 0
                              const showReasoningPanel = isAssistant && (m.streaming || reasoningAvailable)
                              const truncatedByLength = isAssistant && m.finishReason === "length"
                              const reasoningLabel = m.streaming
                                ? isReasoningOpen
                                  ? "Hide thinking"
                                  : "Show thinking"
                                : isReasoningOpen
                                  ? "Hide reasoning"
                                  : "Show reasoning"

                              const bubbleText =
                                isUser && m.attachments && m.attachments.length > 0
                                  ? m.content.split("\n\n[File:")[0] || "File(s) attached"
                                  : m.content.trim().length > 0
                                    ? m.content
                                    : isAssistant && m.streaming
                                      ? "Synthesising a confidential response…"
                                      : m.content

                              const label = isUser ? "You" : assistantName

                              const bubbleClass = isUser
                                ? "inline-block max-w-[65ch] whitespace-pre-wrap break-words rounded-2xl bg-primary px-4 py-3 text-left text-sm leading-6 text-primary-foreground shadow"
                                : "w-full whitespace-pre-wrap break-words border-l-2 border-primary/40 pl-6 text-left text-sm leading-7 text-foreground"

                              const reasoningContainerClass = isUser ? "max-w-[65ch]" : "w-full"
                              const truncatedNoteClass = isUser ? "max-w-[65ch]" : "w-full"

                              const attachmentsContainerClass = cn(
                                "flex flex-col gap-1 text-xs text-muted-foreground",
                                isUser ? "items-end" : "items-start w-full"
                              )

                              const toggleReasoningPanel = () => {
                                setReasoningOpen((prev) => ({ ...prev, [i]: !isReasoningOpen }))
                              }

                              return (
                                <div key={i} className={cn("flex w-full", isUser ? "justify-end" : "justify-start")}>
                                  <div
                                    className={cn(
                                      "flex w-full max-w-4xl gap-3",
                                      isUser ? "justify-end" : "justify-start"
                                    )}
                                  >
                                    {isAssistant && (
                                      <div className="relative">
                                        <button
                                          type="button"
                                          onClick={showReasoningPanel ? toggleReasoningPanel : undefined}
                                          disabled={!showReasoningPanel}
                                          className={cn(
                                            "mt-1 flex size-8 items-center justify-center rounded-full bg-muted transition-all",
                                            showReasoningPanel && "cursor-pointer hover:bg-primary/20 hover:ring-2 hover:ring-primary/30",
                                            isReasoningOpen && "bg-primary/20 ring-2 ring-primary/40",
                                            !showReasoningPanel && "cursor-default"
                                          )}
                                          title={showReasoningPanel ? (isReasoningOpen ? "Hide reasoning" : "Show reasoning") : undefined}
                                        >
                                          <Bot className={cn("size-5", isReasoningOpen ? "text-primary" : "text-muted-foreground")} />
                                          {showReasoningPanel && (
                                            <div className="absolute -right-0.5 -top-0.5 flex size-3.5 items-center justify-center rounded-full bg-primary">
                                              <Sparkles className="size-2.5 text-primary-foreground" />
                                            </div>
                                          )}
                                        </button>
                                      </div>
                                    )}
                                    <div
                                      className={cn(
                                        "flex flex-col gap-2",
                                        isUser
                                          ? "max-w-3xl items-end text-right"
                                          : "flex-1 items-start text-left"
                                      )}
                                    >
                                      <div className="text-[11px] font-semibold uppercase tracking-wide text-muted-foreground/70">
                                        {label}
                                        {m.streaming && " · streaming"}
                                        {truncatedByLength && " · truncated"}
                                      </div>
                                    {m.attachments && m.attachments.length > 0 && (
                                      <div className={attachmentsContainerClass}>
                                        {m.attachments.map((file, fileIndex) => (
                                          <div
                                            key={fileIndex}
                                            className={cn(
                                              "flex items-center gap-2 rounded-xl border border-border/60 bg-muted/40 p-2",
                                              !isUser && "w-full"
                                            )}
                                          >
                                            <FileText className="size-3 text-muted-foreground" />
                                            <span className="font-medium">{file.name}</span>
                                            <span>
                                              ({formatFileSize(file.size)}, {formatWordCount(countWords(file.content))})
                                            </span>
                                          </div>
                                        ))}
                                      </div>
                                    )}
                                    <div
                                      className={bubbleClass}
                                    >
                                      <Markdown content={bubbleText} className="markdown-body text-sm" />
                                    </div>
                                    {showReasoningPanel && isReasoningOpen && (
                                      <div className="w-full overflow-hidden rounded-xl border border-primary/25 bg-primary/5 animate-in fade-in slide-in-from-top-2 duration-300">
                                        <div className="flex items-center gap-2 border-b border-primary/15 px-3 py-2 text-xs font-medium text-primary">
                                          <Sparkles className="size-3.5" />
                                          <span>{m.streaming ? "Thinking..." : "Reasoning"}</span>
                                        </div>
                                        <div className="px-3 py-3 text-xs text-muted-foreground">
                                          <Markdown
                                            content={
                                              reasoningAvailable
                                                ? m.reasoning_content?.trim() ?? ""
                                                : m.streaming
                                                  ? "Gathering confidential reasoning..."
                                                  : "No reasoning shared for this turn."
                                            }
                                            className="markdown-body text-xs"
                                          />
                                        </div>
                                      </div>
                                    )}
                                      {truncatedByLength && (
                                        <div className={cn("text-[11px] text-muted-foreground/80", truncatedNoteClass)}>
                                          Umbra paused because the API token limit was reached. Ask to continue for more detail.
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              )
                            })}
                            <div ref={messagesEndRef} aria-hidden />
                          </div>
                          {showScrollToLatest && (
                            <div className="pointer-events-none absolute inset-x-0 bottom-3 flex justify-center">
                              <Button
                                type="button"
                                size="sm"
                                variant={hasNewMessages ? "default" : "secondary"}
                                className="pointer-events-auto gap-1 rounded-full px-3 py-1 text-xs shadow-md"
                                onClick={() => scrollToBottom()}
                              >
                                <ArrowDown className="size-4" />
                                <span>{hasNewMessages ? "New reply" : "Scroll to latest"}</span>
                              </Button>
                            </div>
                          )}
                        </div>
                        <form onSubmit={onSubmit} className="border-t border-border/60 bg-background px-5 py-4 sm:px-6 shrink-0">
                          <div className="mb-3 flex flex-wrap items-center justify-between gap-2 text-xs text-muted-foreground">
                            <span className="uppercase tracking-wide text-[11px] text-muted-foreground/80">
                              Reasoning intensity
                            </span>
                            <div className="flex gap-1">
                              {["low", "medium", "high"].map((effort) => (
                                <Button
                                  key={effort}
                                  type="button"
                                  variant={reasoningEffort === effort ? "default" : "outline"}
                                  size="sm"
                                  className="h-7 px-3 text-[11px] uppercase"
                                  onClick={() => setReasoningEffort(effort as "low" | "medium" | "high")}
                                  disabled={isSending}
                                >
                                  {effort}
                                </Button>
                              ))}
                            </div>
                          </div>
                          {uploadedFiles.length > 0 && (
                            <div className="mb-3 space-y-2">
                              {uploadedFiles.map((file, index) => (
                                <div
                                  key={index}
                                  className="flex items-center justify-between rounded-md border bg-muted/30 p-2 text-xs"
                                >
                                  <div className="flex items-center gap-2">
                                    <FileText className="size-3 text-muted-foreground" />
                                    <span className="font-medium">{file.name}</span>
                                    <span className="text-muted-foreground">
                                      ({formatFileSize(file.size)}, {formatWordCount(countWords(file.content))})
                                    </span>
                                  </div>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => removeFile(index)}
                                    className="h-6 w-6 p-0 hover:bg-destructive/10"
                                  >
                                    <X className="size-3" />
                                  </Button>
                                </div>
                              ))}
                            </div>
                          )}

                          <div className="flex w-full items-start gap-2">
                            <div className="flex-1">
                              <label htmlFor="secure-input" className="sr-only">
                                Secure message input
                              </label>
                              <textarea
                                id="secure-input"
                                value={input}
                                onChange={(e) => {
                                  setInput(e.target.value)
                                }}
                                onKeyDown={onKeyDown}
                                disabled={isSending}
                                placeholder="Shift+Enter for a newline. Messages and attachments stay encrypted end-to-end."
                                className="h-[60px] w-full resize-none rounded-2xl border bg-background px-4 py-3.5 text-sm shadow-sm focus:outline-none focus:ring-2 focus:ring-ring"
                                rows={2}
                              />
                            </div>
                            <input
                              type="file"
                              ref={fileInputRef}
                              onChange={handleFileUpload}
                              multiple
                              accept=".txt,.md,.json,.csv,.py,.js,.ts,.tsx,.jsx,.html,.css,.xml,.yaml,.yml,.pdf"
                              className="hidden"
                            />
                            <Button
                              type="button"
                              variant="ghost"
                              size="icon"
                              onClick={() => fileInputRef.current?.click()}
                              disabled={isSending}
                              className="rounded-xl h-[60px] w-[60px] shrink-0"
                              title="Upload files"
                            >
                              <Paperclip className="size-5" />
                            </Button>
                            <Button
                              type="submit"
                              size="icon"
                              className="rounded-xl h-[60px] w-[60px] shrink-0"
                              disabled={isSending || (!input.trim() && uploadedFiles.length === 0)}
                            >
                              <Send className="size-5" />
                              <span className="sr-only">Send secure message</span>
                            </Button>
                          </div>
                        </form>
                      </CardContent>
                    </Card>
                  </div>
                </div>
              </section>
              <aside className="flex flex-col gap-4 order-2 lg:order-1">
                <Card className="border-0 bg-background/60 shadow-sm backdrop-blur supports-[backdrop-filter]:bg-background/50">
                  <CardContent className="space-y-4 p-5">
                    <h2 className="text-sm font-semibold">Session details</h2>
                    <div className="space-y-3 text-xs">
                      {providerModel && (
                        <div className="flex items-center gap-2">
                          <Bot className="size-4 text-muted-foreground/80" />
                          <span className="text-muted-foreground">
                            <span className="font-medium">Model:</span> {providerModel}
                          </span>
                        </div>
                      )}
                      <div className="flex items-center gap-2">
                        <Bot className="size-4 text-muted-foreground/80" />
                        <span className="text-muted-foreground">
                          <span className="font-medium">Assistant:</span> {assistantName}
                        </span>
                      </div>
                      {providerHost && (
                        <div className="flex items-center gap-2">
                          <Globe className="size-4 text-muted-foreground/80" />
                          <span className="text-muted-foreground" title={providerHost}>
                            <span className="font-medium">Host:</span> {truncateMiddle(providerHost, 35)}
                          </span>
                        </div>
                      )}
                      {providerTunnelBase && (
                        <div className="flex items-center gap-2">
                          <ShieldCheck className="size-4 text-muted-foreground/80" />
                          <span className="text-muted-foreground" title={providerTunnelBase}>
                            <span className="font-medium">Tunnel:</span> {truncateMiddle(providerTunnelBase, 35)}
                          </span>
                        </div>
                      )}
                      {cacheSalt && (
                        <div className="flex items-center gap-2">
                          <Key className="size-4 text-muted-foreground/80" />
                          <span className="text-muted-foreground" title={cacheSalt}>
                            <span className="font-medium">KV cache salt:</span> <span className="font-mono">{cacheSalt.slice(0, 8)}...{cacheSalt.slice(-4)}</span>
                          </span>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
                <Card className="border-0 bg-background/60 shadow-sm backdrop-blur supports-[backdrop-filter]:bg-background/50">
                  <CardContent className="p-0">
                    <Accordion type="single" collapsible className="w-full">
                      <AccordionItem value="proofs" className="border-b-0">
                        <AccordionTrigger className="px-5 py-4 text-sm font-medium hover:no-underline">
                          <div className="flex items-center gap-2">
                            <ShieldCheck className="size-4 text-primary" />
                            <span>Proof of Confidentiality</span>
                          </div>
                        </AccordionTrigger>
                        <AccordionContent className="space-y-3 px-5 pb-5 text-sm text-muted-foreground">
                          <p>
                            These attestations verify that your data is processed within a secure, isolated, and measured
                            environment.
                          </p>
                          <div className="space-y-3">
                            <div className="rounded-lg border bg-background p-3">
                              <div className="flex items-center justify-between text-xs font-medium">
                                <span className="inline-flex items-center gap-2">
                                  <Cpu className="size-3.5" /> Intel TDX
                                </span>
                                <span className="inline-flex items-center gap-1 text-success">
                                  <CheckCircle2 className="size-3.5" /> Verified
                                </span>
                              </div>
                              <p className="mt-1.5 break-all font-mono text-xs text-muted-foreground">quote: 0x9f…a3c</p>
                            </div>
                            <div className="rounded-lg border bg-background p-3">
                              <div className="flex items-center justify-between text-xs font-medium">
                                <span className="inline-flex items-center gap-2">
                                  <Shield className="size-3.5" /> TLS Channel
                                </span>
                                <span className="inline-flex items-center gap-1 text-success">
                                  <CheckCircle2 className="size-3.5" /> Verified
                                </span>
                              </div>
                              <p className="mt-1.5 break-all font-mono text-xs text-muted-foreground">
                                tls: 1.3 · ECDHE-RSA · AES-256-GCM
                              </p>
                            </div>
                            <div className="rounded-lg border bg-background p-3">
                              <div className="flex items-center justify-between text-xs font-medium">
                                <span className="inline-flex items-center gap-2">
                                  <Cpu className="size-3.5" /> NVIDIA GPU
                                </span>
                                <span className="inline-flex items-center gap-1 text-success">
                                  <CheckCircle2 className="size-3.5" /> Verified
                                </span>
                              </div>
                              <p className="mt-1.5 break-all font-mono text-xs text-muted-foreground">attest: device cert</p>
                            </div>
                            <div className="rounded-lg border bg-background p-3">
                              <div className="flex items-center justify-between text-xs font-medium">
                                <span className="inline-flex items-center gap-2">
                                  <Lock className="size-3.5" /> Runtime
                                </span>
                                <span className="inline-flex items-center gap-1 text-success">
                                  <CheckCircle2 className="size-3.5" /> Verified
                                </span>
                              </div>
                              <p className="mt-1.5 break-all font-mono text-xs text-muted-foreground">policy: sha256:…</p>
                            </div>
                          </div>
                        </AccordionContent>
                      </AccordionItem>
                    </Accordion>
                  </CardContent>
                </Card>
              </aside>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}
</file>

<file path="app/layout.tsx">
import type React from "react"
import "@/styles/globals.css"
import type { Metadata } from "next"
import { ThemeProvider } from "@/components/theme-provider"
import { ChunkRecovery } from "@/components/chunk-recovery"

export const metadata: Metadata = {
  title: "Concrete AI — Confidential AI for Your Data",
  description:
    "Confidential AI for sensitive data — security, privacy, and confidentiality backed by modern cryptography.",
  generator: "Concrete AI",
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
          <ChunkRecovery />
          {children}
        </ThemeProvider>
      </body>
    </html>
  )
}
</file>

<file path="app/page.tsx">
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import Image from "next/image"
import { useRouter } from "next/navigation"
import peopleData from "../people.json"
import { motion } from "framer-motion"
import {
  Check,
  ChevronRight,
  Menu,
  X,
  Moon,
  Sun,
  ArrowRight,
  Star,
  Zap,
  Shield,
  Users,
  BarChart,
  Layers,
  Lock,
  Code,
  MessageSquare,
  Bot,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { useTheme } from "next-themes"

export default function LandingPage() {
  const [isScrolled, setIsScrolled] = useState(false)
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false)
  const { theme, setTheme } = useTheme()
  const [mounted, setMounted] = useState(false)
  const router = useRouter()

  useEffect(() => {
    setMounted(true)
    void router.prefetch?.("/confidential-ai")
  }, [router])

  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 10) {
        setIsScrolled(true)
      } else {
        setIsScrolled(false)
      }
    }

    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark")
  }

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 },
  }

  const features = [
    {
      title: "Confidential by Design",
      description: "Run AI on sensitive data without exposing it to providers or operators.",
      icon: <Zap className="size-5" />,
    },
    {
      title: "Cryptography‑Backed Security",
      description: "End‑to‑end protection in transit, at rest, and in use — anchored by modern cryptography.",
      icon: <Shield className="size-5" />,
    },
    {
      title: "Privacy Controls",
      description: "Granular access, policy enforcement, and audit logs for clear governance.",
      icon: <Users className="size-5" />,
    },
    {
      title: "Compliance‑Ready",
      description: "Support common regulatory needs with strong data boundaries and visibility.",
      icon: <BarChart className="size-5" />,
    },
    {
      title: "Seamless Integrations",
      description: "SDKs and APIs to connect data sources and MLOps pipelines securely.",
      icon: <Layers className="size-5" />,
    },
    {
      title: "Priority Support",
      description: "Experts to help design and scale confidentiality‑first AI systems.",
      icon: <Star className="size-5" />,
    },
  ];

  return (
    <div className="flex min-h-[100dvh] flex-col">
      <header
        className={`sticky top-0 z-50 w-full backdrop-blur-lg transition-all duration-300 ${isScrolled ? "bg-background/80 shadow-sm" : "bg-transparent"}`}
      >
          <div className="container flex h-16 items-center justify-between">
          <Link href="/" className="flex items-center gap-2 font-bold">
            <Image src="/logo.png" alt="Concrete AI logo" width={28} height={28} className="rounded-sm" />
            <span>Concrete AI</span>
          </Link>
          <nav className="hidden md:flex gap-8">
            <Link
              href="#features"
              className="text-sm font-medium text-muted-foreground transition-colors hover:text-foreground"
            >
              Features
            </Link>
            
            <Link
              href="#pricing"
              className="text-sm font-medium text-muted-foreground transition-colors hover:text-foreground"
            >
              Pricing
            </Link>
            <Link
              href="#faq"
              className="text-sm font-medium text-muted-foreground transition-colors hover:text-foreground"
            >
              FAQ
            </Link>
          </nav>
          <div className="hidden md:flex gap-4 items-center">
            <Button variant="ghost" size="icon" onClick={toggleTheme} className="rounded-full">
              {mounted && theme === "dark" ? <Sun className="size-[18px]" /> : <Moon className="size-[18px]" />}
              <span className="sr-only">Toggle theme</span>
            </Button>
            <Button className="rounded-full" asChild>
              <Link href="/confidential-ai" prefetch={false}>
                Try Confidential AI
                <ChevronRight className="ml-1 size-4" />
              </Link>
            </Button>
            <Button variant="outline" className="rounded-full" asChild>
              <a href="mailto:contact@concrete-security.com">Contact Us</a>
            </Button>
          </div>
          <div className="flex items-center gap-4 md:hidden">
            <Button variant="ghost" size="icon" onClick={toggleTheme} className="rounded-full">
              {mounted && theme === "dark" ? <Sun className="size-[18px]" /> : <Moon className="size-[18px]" />}
            </Button>
            <Button variant="ghost" size="icon" onClick={() => setMobileMenuOpen(!mobileMenuOpen)}>
              {mobileMenuOpen ? <X className="size-5" /> : <Menu className="size-5" />}
              <span className="sr-only">Toggle menu</span>
            </Button>
          </div>
        </div>
        {/* Mobile menu */}
        {mobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="md:hidden absolute top-16 inset-x-0 bg-background/95 backdrop-blur-lg border-b"
          >
            <div className="container py-4 flex flex-col gap-4">
              <Link href="#features" className="py-2 text-sm font-medium" onClick={() => setMobileMenuOpen(false)}>
                Features
              </Link>
              
              <Link href="#pricing" className="py-2 text-sm font-medium" onClick={() => setMobileMenuOpen(false)}>
                Pricing
              </Link>
              <Link href="#faq" className="py-2 text-sm font-medium" onClick={() => setMobileMenuOpen(false)}>
                FAQ
              </Link>
              <div className="flex flex-col gap-2 pt-2 border-t">
                <Button className="rounded-full" asChild>
                  <Link href="/confidential-ai" prefetch={false} onClick={() => setMobileMenuOpen(false)}>
                    Try Confidential AI
                    <ChevronRight className="ml-1 size-4" />
                  </Link>
                </Button>
                <Button variant="outline" className="rounded-full" asChild>
                  <a href="mailto:contact@concrete-security.com">Contact Us</a>
                </Button>
              </div>
            </div>
          </motion.div>
        )}
      </header>
      <main className="flex-1">
        {/* Hero Section */}
        <section className="w-full py-16 md:py-28 overflow-hidden">
          <div className="container px-4 md:px-6 max-w-screen-xl">
            <div className="grid gap-10 md:grid-cols-12 md:gap-12 items-start">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="md:col-span-7"
              >
                <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold leading-tight tracking-tight mb-6">
                  Concrete AI
                </h1>
                <p className="text-lg md:text-xl text-muted-foreground mb-8 max-w-xl">
                  Confidential AI for sensitive data — security, privacy, and confidentiality backed by modern cryptography.
                </p>
                <div className="flex flex-col sm:flex-row gap-4">
                  <Button size="lg" className="rounded-full h-12 px-8 text-base" asChild>
                    <Link href="/confidential-ai" prefetch={false}>
                      Try Confidential AI
                      <ArrowRight className="ml-2 size-4" />
                    </Link>
                  </Button>
                  <Button size="lg" variant="outline" className="rounded-full h-12 px-8 text-base" asChild>
                    <a href="mailto:contact@concrete-security.com">Contact Us</a>
                  </Button>
                </div>
                <p className="text-sm text-muted-foreground mt-4">
                Have a confidential AI use case? <a className="underline" href="mailto:contact@concrete-security.com">Contact us</a>.
                </p>
              </motion.div>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.1 }}
                className="md:col-span-5 relative"
              >
                <div className="rounded-2xl overflow-hidden shadow-xl ring-1 ring-border/50 bg-background">
                  <Image
                    src="/assets/hero.png"
                    width={1280}
                    height={960}
                    alt="Concrete AI visual"
                    className="w-full h-72 md:h-96 object-cover"
                    priority
                  />
                </div>
              </motion.div>
            </div>
          </div>
        </section>

        {/* Security Guarantees Section */}
        <section className="w-full py-16 md:py-24 bg-muted/30">
          <div className="container px-4 md:px-6 max-w-screen-xl">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.4 }}
              className="flex flex-col items-start justify-center space-y-4 text-left mb-10"
            >
              <h2 className="text-3xl md:text-4xl font-bold tracking-tight">Security, Privacy, and IP Protection</h2>
              <p className="max-w-[900px] text-muted-foreground md:text-lg">
                Concrete AI gives privacy for both users and operators by encrypting everything, including both prompts and
                models. Use of your data is controlled by strict attested execution and additional policy controls. Nobody can
                see your data, not even us.
              </p>
            </motion.div>
            <div className="grid gap-6 sm:grid-cols-3">
              <div className="rounded-lg border bg-card p-5">
                <div className="flex items-center gap-2 mb-2 text-sm font-medium text-primary"><Shield className="size-4" /> Cryptographic Security</div>
                <p className="text-sm text-muted-foreground">Encryption in transit, at rest, and in use with attestation and auditability.</p>
              </div>
              <div className="rounded-lg border bg-card p-5">
                <div className="flex items-center gap-2 mb-2 text-sm font-medium text-primary"><Lock className="size-4" /> User Privacy</div>
                <p className="text-sm text-muted-foreground">Client‑side encryption ensures plaintext data never leaves user control.</p>
              </div>
              <div className="rounded-lg border bg-card p-5">
                <div className="flex items-center gap-2 mb-2 text-sm font-medium text-primary"><Layers className="size-4" /> Provider IP</div>
                <p className="text-sm text-muted-foreground">Model IP protected via isolated, measured runtimes and strict policies.</p>
              </div>
            </div>
          </div>
        </section>

        

        {/* Who We Are Section */}
        <section className="w-full py-16 md:py-24 bg-muted/30">
          <div className="container px-4 md:px-6 max-w-screen-xl">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.4 }}
              className="flex flex-col items-start justify-center space-y-4 text-left mb-8"
            >
              <h2 className="text-3xl md:text-4xl font-bold tracking-tight">Who We Are</h2>
              <p className="max-w-[900px] text-muted-foreground md:text-lg">
                We’re a team of cryptography, secure‑systems, and AI engineers building confidential AI so
                organizations can use sensitive data without compromise. Our approach blends modern cryptography with
                practical product design—verifiable, privacy‑by‑default, and developer‑friendly.
              </p>
            </motion.div>

            <div className="grid gap-6 sm:grid-cols-2 md:grid-cols-3">
              {peopleData.people.map((p, i) => (
                <motion.div
                  key={p.name}
                  initial={{ opacity: 0, y: 10 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.3, delay: i * 0.05 }}
                >
                  <div className="rounded-lg border bg-card p-6 text-center h-full flex flex-col items-center">
                    <Image
                      src={p.image}
                      alt={p.name}
                      width={128}
                      height={128}
                      className="mb-4 h-32 w-32 rounded-full object-cover ring-1 ring-border"
                    />
                    <h3 className="mt-4 text-base font-semibold">{p.name}</h3>
                    <p className="mt-2 text-sm text-muted-foreground">{p.expertise}</p>
                  </div>
                </motion.div>
              ))}
            </div>

            
          </div>
        </section>

        {/* Use Cases Section */}
        <section className="w-full py-16 md:py-24">
          <div className="container px-4 md:px-6 max-w-screen-xl">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.4 }}
              className="flex flex-col items-start justify-center space-y-4 text-left mb-10"
            >
              <h2 className="text-3xl md:text-4xl font-bold tracking-tight">Use Cases</h2>
              <p className="max-w-[900px] text-muted-foreground md:text-lg">
                From confidential inference to sensitive fine‑tuning and secure retrieval—choose the mechanism that fits
                your workload. We support both TEE and FHE, just choose the one that fits your needs.
              </p>
            </motion.div>
            <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-4">
              <div className="rounded-lg border p-5">
                <div className="flex items-center gap-2 mb-2 text-sm font-medium text-primary"><Zap className="size-4" /> LLM Inference</div>
                <p className="text-sm text-muted-foreground">Run prompts over sensitive data without exposing plaintext to operators or providers.</p>
              </div>
              <div className="rounded-lg border p-5">
                <div className="flex items-center gap-2 mb-2 text-sm font-medium text-primary"><Layers className="size-4" /> Fine‑Tuning</div>
                <p className="text-sm text-muted-foreground">Adapt models with private datasets. Choose FHE/TEE/MPC based on security and throughput.</p>
              </div>
              <div className="rounded-lg border p-5">
                <div className="flex items-center gap-2 mb-2 text-sm font-medium text-primary"><BarChart className="size-4" /> Secure RAG/Analytics</div>
                <p className="text-sm text-muted-foreground">Search and analyze encrypted corpora with confidential pipelines and clear audit trails.</p>
              </div>
              <div className="rounded-lg border p-5">
                <div className="flex items-center gap-2 mb-2 text-sm font-medium text-primary"><Users className="size-4" /> Multi‑Party Collaboration</div>
                <p className="text-sm text-muted-foreground">Compute across organizations without sharing raw data, preserving privacy and IP.</p>
              </div>
            </div>
          </div>
        </section>

        {/* Features Section */}
        <section id="features" className="w-full py-16 md:py-24">
          <div className="container px-4 md:px-6 max-w-screen-xl">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
              className="flex flex-col items-start justify-center space-y-4 text-left mb-10"
            >
              <h2 className="text-3xl md:text-4xl font-bold tracking-tight">Key Benefits</h2>
              <p className="max-w-[800px] text-muted-foreground md:text-lg">
                A focused set of capabilities to keep your data protected while enabling powerful AI experiences.
              </p>
            </motion.div>

            <div className="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
              {features.map((feature, i) => (
                <motion.div key={i} initial={{ opacity: 0, y: 10 }} whileInView={{ opacity: 1, y: 0 }} viewport={{ once: true }} transition={{ duration: 0.3, delay: i * 0.05 }}>
                  <div className="flex flex-col">
                    <div className="size-10 rounded-md bg-primary/10 flex items-center justify-center text-primary mb-3">
                      {feature.icon}
                    </div>
                    <h3 className="text-xl font-bold mb-1">{feature.title}</h3>
                    <p className="text-muted-foreground">{feature.description}</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </section>

        {/* How It Works Section */}
        <section className="w-full py-20 md:py-32 bg-muted/30 relative overflow-hidden">
          

          <div className="container px-4 md:px-6 relative max-w-screen-xl">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
              className="flex flex-col items-center justify-center space-y-4 text-center mb-16"
            >
              <Badge className="rounded-full px-4 py-1.5 text-sm font-medium" variant="secondary">
                How It Works
              </Badge>
              <h2 className="text-3xl md:text-4xl font-bold tracking-tight">How Confidential AI Works</h2>
              <p className="max-w-[800px] text-muted-foreground md:text-lg">
                Data stays protected from end to end — encrypted client‑side and processed in cryptography‑backed environments.
              </p>
            </motion.div>

            <div className="grid md:grid-cols-3 gap-8 md:gap-12 relative">
              <div className="hidden md:block absolute top-1/2 left-0 right-0 h-0.5 bg-gradient-to-r from-transparent via-border to-transparent -translate-y-1/2 z-0"></div>

              {[
                {
                  step: "01",
                  title: "Encrypt Client‑Side",
                  description: "Your data is encrypted before it leaves your device. Keys remain under your control.",
                },
                {
                  step: "02",
                  title: "Process with Proof",
                  description: "Data is processed in cryptography‑backed environments with attestations and auditability.",
                },
                {
                  step: "03",
                  title: "Deliver Results",
                  description: "Only authorized outputs are returned with logs and evidence for governance.",
                },
              ].map((step, i) => (
                <motion.div
                  key={i}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.5, delay: i * 0.1 }}
                  className="relative z-10 flex flex-col items-center text-center space-y-4"
                >
                  <div className="flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-primary to-primary/70 text-primary-foreground text-xl font-bold shadow-lg">
                    {step.step}
                  </div>
                  <h3 className="text-xl font-bold">{step.title}</h3>
                  <p className="text-muted-foreground">{step.description}</p>
                </motion.div>
              ))}
            </div>
          </div>
        </section>

        

        {/* Pricing Section */}
        <section id="pricing" className="w-full py-16 md:py-24 relative overflow-hidden">
          <div className="container px-4 md:px-6 relative max-w-screen-xl">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
              className="flex flex-col items-center justify-center space-y-4 text-center mb-12"
            >
              <Badge className="rounded-full px-4 py-1.5 text-sm font-medium" variant="secondary">
                Pricing
              </Badge>
              <h2 className="text-3xl md:text-4xl font-bold tracking-tight">Simple, Transparent Pricing</h2>
              <p className="max-w-[800px] text-muted-foreground md:text-lg">
                Choose the plan that's right for your business.
              </p>
            </motion.div>

            <div className="mx-auto max-w-3xl">
              <Card className="overflow-hidden border-border/40 bg-gradient-to-b from-background to-muted/10 backdrop-blur">
                <CardContent className="p-6 md:p-8">
                  <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-6">
                    <div>
                      <h3 className="text-2xl font-bold">Full Confidential AI Access</h3>
                      <p className="text-muted-foreground mt-2">One plan, all features — simple and transparent.</p>
                      <ul className="space-y-2 mt-4">
                        <li className="flex items-center"><Check className="mr-2 size-4 text-primary" /> Secure, cryptography‑backed processing</li>
                        <li className="flex items-center"><Check className="mr-2 size-4 text-primary" /> Confidential AI chat access</li>
                        <li className="flex items-center"><Check className="mr-2 size-4 text-primary" /> Email support</li>
                      </ul>
                    </div>
                    <div className="text-center md:text-right">
                      <div className="text-4xl font-bold">$29<span className="text-lg align-top font-normal">/mo</span></div>
                      <div className="mt-4 flex gap-3 justify-center md:justify-end">
                        <Button className="rounded-full px-6" asChild>
                          <Link href="/confidential-ai">Try Confidential AI</Link>
                        </Button>
                        <Button variant="outline" className="rounded-full px-6" asChild>
                          <a href="mailto:contact@concrete-security.com">Contact Us</a>
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </section>

        {/* FAQ Section */}
        <section id="faq" className="w-full py-20 md:py-32">
          <div className="container px-4 md:px-6">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5 }}
              className="flex flex-col items-center justify-center space-y-4 text-center mb-12"
            >
              <Badge className="rounded-full px-4 py-1.5 text-sm font-medium" variant="secondary">
                FAQ
              </Badge>
              <h2 className="text-3xl md:text-4xl font-bold tracking-tight">Frequently Asked Questions</h2>
              <p className="max-w-[800px] text-muted-foreground md:text-lg">
                Find answers to common questions about our platform.
              </p>
            </motion.div>

            <div className="mx-auto max-w-3xl">
              <Accordion type="single" collapsible className="w-full">
                {[
                  {
                    question: "How do you keep my data confidential?",
                    answer:
                      "We use a combination of Trusted Execution Environments (TEE) and Fully Homomorphic Encryption (FHE) via a custom protocol. This ensures all data and code stay encrypted and attested so only authorized operations run without exposing your data.",
                  },
                  {
                    question: "Can I change plans later?",
                    answer:
                      "Yes, you can upgrade or downgrade your plan at any time. If you upgrade, the new pricing will be prorated for the remainder of your billing cycle. If you downgrade, the new pricing will take effect at the start of your next billing cycle.",
                  },
                  {
                    question: "Is there a limit to how many users I can add?",
                    answer:
                      "The number of users depends on your plan. The Starter plan allows up to 5 team members, the Professional plan allows up to 20, and the Enterprise plan has no limit on team members.",
                  },
                  {
                    question: "Do you offer discounts for nonprofits or educational institutions?",
                    answer:
                      "Yes, we offer special pricing for nonprofits, educational institutions, and open-source projects. Please contact our sales team for more information.",
                  },
                  {
                    question: "What kind of support do you offer?",
                    answer:
                      "Support varies by plan. All plans include email support, with the Professional plan offering priority email support. The Enterprise plan includes 24/7 phone and email support. We also have an extensive knowledge base and community forum available to all users.",
                  },
                ].map((faq, i) => (
                  <motion.div
                    key={i}
                    initial={{ opacity: 0, y: 10 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{ duration: 0.3, delay: i * 0.05 }}
                  >
                    <AccordionItem value={`item-${i}`} className="border-b border-border/40 py-2">
                      <AccordionTrigger className="text-left font-medium hover:no-underline">
                        {faq.question}
                      </AccordionTrigger>
                      <AccordionContent className="text-muted-foreground">{faq.answer}</AccordionContent>
                    </AccordionItem>
                  </motion.div>
                ))}
              </Accordion>
            </div>
          </div>
        </section>

        
      </main>
      <footer className="w-full border-t bg-background/95 backdrop-blur-sm">
        <div className="container flex flex-col gap-8 px-4 py-10 md:px-6 lg:py-16">
          <div className="grid gap-8 sm:grid-cols-2 md:grid-cols-4">
            <div className="space-y-4">
              <Link href="/" className="flex items-center gap-2 font-bold">
                <Image src="/logo.png" alt="Concrete AI logo" width={28} height={28} className="rounded-sm" />
                <span>Concrete AI</span>
              </Link>
              <p className="text-sm text-muted-foreground">
                Confidential AI for sensitive data — backed by modern cryptography.
              </p>
              <div className="flex gap-4">
                <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="size-5"
                  >
                    <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>
                  </svg>
                  <span className="sr-only">Facebook</span>
                </Link>
                <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="size-5"
                  >
                    <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path>
                  </svg>
                  <span className="sr-only">Twitter</span>
                </Link>
                <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="size-5"
                  >
                    <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                    <rect width="4" height="12" x="2" y="9"></rect>
                    <circle cx="4" cy="4" r="2"></circle>
                  </svg>
                  <span className="sr-only">LinkedIn</span>
                </Link>
              </div>
            </div>
            <div className="space-y-4">
              <h4 className="text-sm font-bold">Product</h4>
              <ul className="space-y-2 text-sm">
                <li>
                  <Link href="#features" className="text-muted-foreground hover:text-foreground transition-colors">
                    Features
                  </Link>
                </li>
                <li>
                  <Link href="#pricing" className="text-muted-foreground hover:text-foreground transition-colors">
                    Pricing
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Integrations
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    API
                  </Link>
                </li>
              </ul>
            </div>
            <div className="space-y-4">
              <h4 className="text-sm font-bold">Resources</h4>
              <ul className="space-y-2 text-sm">
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Documentation
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Guides
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Blog
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Support
                  </Link>
                </li>
              </ul>
            </div>
            <div className="space-y-4">
              <h4 className="text-sm font-bold">Company</h4>
              <ul className="space-y-2 text-sm">
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    About
                  </Link>
                </li>
                <li>
                  <a href="mailto:contact@concrete-security.com" className="text-muted-foreground hover:text-foreground transition-colors">
                    Contact Us
                  </a>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Careers
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Privacy Policy
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Terms of Service
                  </Link>
                </li>
              </ul>
            </div>
          </div>
          <div className="flex flex-col gap-4 sm:flex-row justify-between items-center border-t border-border/40 pt-8">
            <p className="text-xs text-muted-foreground">
              &copy; {new Date().getFullYear()} Concrete AI. All rights reserved.
            </p>
            <div className="flex gap-4">
              <Link href="#" className="text-xs text-muted-foreground hover:text-foreground transition-colors">
                Privacy Policy
              </Link>
              <Link href="#" className="text-xs text-muted-foreground hover:text-foreground transition-colors">
                Terms of Service
              </Link>
              <Link href="#" className="text-xs text-muted-foreground hover:text-foreground transition-colors">
                Cookie Policy
              </Link>
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/chunk-recovery.tsx">
"use client"

import { useEffect } from "react"
import { useRouter } from "next/navigation"

const STORAGE_FLAG = "chunk-recovery:reloaded"

function shouldHandle(error: unknown): boolean {
  if (!error) return false
  const message = typeof error === "string" ? error : typeof error === "object" && "message" in error ? String((error as Error).message) : ""
  if (!message) return false
  return /ChunkLoadError/i.test(message) || /Loading chunk \w+ failed/i.test(message)
}

export function ChunkRecovery() {
  const router = useRouter()

  useEffect(() => {
    router.prefetch?.("/confidential-ai")
  }, [router])

  useEffect(() => {
    const triggerReload = () => {
      if (typeof window === "undefined") return
      try {
        const session = window.sessionStorage
        if (!session) {
          window.location.reload()
          return
        }
        const alreadyReloaded = session.getItem(STORAGE_FLAG)
        if (alreadyReloaded) {
          session.removeItem(STORAGE_FLAG)
          return
        }
        session.setItem(STORAGE_FLAG, "1")
        window.location.reload()
      } catch (error) {
        window.location.reload()
      }
    }

    const errorHandler = (event: ErrorEvent) => {
      if (shouldHandle(event?.error ?? event?.message)) {
        event.preventDefault?.()
        triggerReload()
      }
    }

    const rejectionHandler = (event: PromiseRejectionEvent) => {
      if (shouldHandle(event?.reason)) {
        event.preventDefault?.()
        triggerReload()
      }
    }

    window.addEventListener("error", errorHandler)
    window.addEventListener("unhandledrejection", rejectionHandler)

    return () => {
      window.removeEventListener("error", errorHandler)
      window.removeEventListener("unhandledrejection", rejectionHandler)
    }
  }, [])

  return null
}
</file>

<file path="components/markdown.tsx">
"use client"

import { memo } from "react"

const LIST_CLASS = "space-y-1 list-outside"

function escapeHtml(value: string) {
  return value
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#39;")
}

function sanitizeUrl(rawUrl: string) {
  const url = rawUrl.trim()
  if (!url) return ""
  const lower = url.toLowerCase()
  if (lower.startsWith("http://") || lower.startsWith("https://") || lower.startsWith("mailto:")) {
    return url
  }
  return ""
}

function renderInlineSegment(text: string): string {
  let escaped = escapeHtml(text)

  const brPlaceholders: string[] = []
  escaped = escaped.replace(/&lt;br\s*\/?&gt;/gi, () => {
    brPlaceholders.push("<br />")
    return `%%BR${brPlaceholders.length - 1}%%`
  })

  const codePlaceholders: string[] = []
  escaped = escaped.replace(/`([^`]+)`/g, (_, inner) => {
    codePlaceholders.push(`<code>${escapeHtml(inner)}</code>`)
    return `%%CODE${codePlaceholders.length - 1}%%`
  })

  const linkPlaceholders: string[] = []
  escaped = escaped.replace(/\[([^\]]+)\]\(([^)]+)\)/g, (_, label, url) => {
    const safeUrl = sanitizeUrl(url)
    if (!safeUrl) {
      return escapeHtml(label)
    }
    const linkHtml = `<a href="${safeUrl}" target="_blank" rel="noopener noreferrer" class="underline decoration-dashed decoration-foreground/40 hover:decoration-foreground">${escapeHtml(label)}</a>`
    linkPlaceholders.push(linkHtml)
    return `%%LINK${linkPlaceholders.length - 1}%%`
  })

  escaped = escaped
    .replace(/\*\*(.+?)\*\*/g, "<strong>$1</strong>")
    .replace(/__(.+?)__/g, "<strong>$1</strong>")
    .replace(/~~(.+?)~~/g, "<del>$1</del>")
    .replace(/\*(.+?)\*/g, "<em>$1</em>")
    .replace(/_(.+?)_/g, "<em>$1</em>")

  escaped = escaped.replace(/%%CODE(\d+)%%/g, (_, idx) => codePlaceholders[Number(idx)] ?? "")
  escaped = escaped.replace(/%%LINK(\d+)%%/g, (_, idx) => linkPlaceholders[Number(idx)] ?? "")
  escaped = escaped.replace(/%%BR(\d+)%%/g, (_, idx) => brPlaceholders[Number(idx)] ?? "")

  return escaped
}

function markdownToHtml(markdown: string) {
  const lines = markdown.replace(/\r\n/g, "\n").split("\n")
  let html = ""
  let inUl = false
  let inOl = false
  let inCodeBlock = false
  let codeFenceLanguage = ""
  const codeLines: string[] = []
  const paragraphLines: string[] = []

  const closeLists = () => {
    if (inUl) {
      html += "</ul>"
      inUl = false
    }
    if (inOl) {
      html += "</ol>"
      inOl = false
    }
  }

  const flushParagraph = () => {
    if (paragraphLines.length > 0) {
      const paragraph = paragraphLines.join("<br />")
      html += `<p class="leading-relaxed">${paragraph}</p>`
      paragraphLines.length = 0
    }
  }

  const flushCodeBlock = () => {
    if (!inCodeBlock) return
    const languageClass = codeFenceLanguage ? ` class="language-${escapeHtml(codeFenceLanguage)}"` : ""
    html += `<pre class="rounded-md bg-muted/70 px-3 py-2 text-xs leading-5 overflow-x-auto"><code${languageClass}>${escapeHtml(codeLines.join("\n"))}</code></pre>`
    codeLines.length = 0
    inCodeBlock = false
    codeFenceLanguage = ""
  }

  const isTableSeparator = (line: string) => {
    return /^\s*\|?\s*:?[-\s|:]+:?\s*\|?\s*$/.test(line)
  }

  const splitTableCells = (row: string) => {
    const trimmed = row.trim()
    const withoutEdges = trimmed.startsWith("|") && trimmed.endsWith("|")
      ? trimmed.slice(1, -1)
      : trimmed
    return withoutEdges.split("|").map((cell) => renderInlineSegment(cell.trim()))
  }

  const parseAlignment = (separator: string) => {
    const cells = splitTableCells(separator)
    return cells.map((cell) => {
      const text = cell.replace(/<[^>]+>/g, "")
      const startsWithColon = /^:/.test(text)
      const endsWithColon = /:$/.test(text)
      if (startsWithColon && endsWithColon) return "center"
      if (endsWithColon) return "right"
      if (startsWithColon) return "left"
      return "left"
    })
  }

  for (let index = 0; index < lines.length; index++) {
    const rawLine = lines[index]
    const line = rawLine

    if (inCodeBlock) {
      if (/^```/.test(line.trim())) {
        flushCodeBlock()
        continue
      }
      codeLines.push(line)
      continue
    }

    if (/^```/.test(line.trim())) {
      flushParagraph()
      closeLists()
      inCodeBlock = true
      const fenceMatch = line.trim().match(/^```(\S+)?/)
      codeFenceLanguage = fenceMatch?.[1] ?? ""
      continue
    }

    if (line.trim() === "") {
      flushParagraph()
      closeLists()
      continue
    }

    // Table detection
    const nextLine = lines[index + 1]
    if (nextLine && isTableSeparator(nextLine)) {
      const headerCells = splitTableCells(line)
      const alignments = parseAlignment(nextLine)
      let bodyRows: string[][] = []
      let bodyIndex = index + 2

      while (bodyIndex < lines.length && /\|/.test(lines[bodyIndex])) {
        const rowLine = lines[bodyIndex]
        if (rowLine.trim() === "") break
        bodyRows.push(splitTableCells(rowLine))
        bodyIndex += 1
      }

      if (headerCells.length > 1 && bodyRows.length > 0) {
        flushParagraph()
        closeLists()
        html += '<div class="markdown-table-wrapper"><table class="markdown-table">'
        html += '<thead><tr>'
        headerCells.forEach((cell, idx) => {
          const align = alignments[idx] ?? "left"
          html += `<th class="align-${align}">${cell}</th>`
        })
        html += '</tr></thead><tbody>'
        bodyRows.forEach((row) => {
          html += '<tr>'
          row.forEach((cell, idx) => {
            const align = alignments[idx] ?? "left"
            html += `<td class="align-${align}">${cell}</td>`
          })
          html += '</tr>'
        })
        html += '</tbody></table></div>'
        index = bodyIndex - 1
        continue
      }
    }

    const headingMatch = line.match(/^(#{1,6})\s+(.*)$/)
    if (headingMatch) {
      const level = Math.min(headingMatch[1].length, 6)
      const content = renderInlineSegment(headingMatch[2])
      flushParagraph()
      closeLists()
      html += `<h${level} class="font-semibold">${content}</h${level}>`
      continue
    }

    if (/^\s*[-*+]\s+/.test(line)) {
      const content = line.replace(/^\s*[-*+]\s+/, "")
      flushParagraph()
      if (inOl) {
        html += "</ol>"
        inOl = false
      }
      if (!inUl) {
        html += `<ul class="${LIST_CLASS} list-disc pl-4">`
        inUl = true
      }
      html += `<li>${renderInlineSegment(content)}</li>`
      continue
    }

    if (/^\s*\d+\.\s+/.test(line)) {
      const content = line.replace(/^\s*\d+\.\s+/, "")
      flushParagraph()
      if (inUl) {
        html += "</ul>"
        inUl = false
      }
      if (!inOl) {
        html += `<ol class="${LIST_CLASS} list-decimal pl-5">`
        inOl = true
      }
      html += `<li>${renderInlineSegment(content)}</li>`
      continue
    }

    paragraphLines.push(renderInlineSegment(line))
  }

  flushCodeBlock()
  flushParagraph()
  closeLists()

  if (!html) {
    return ""
  }

  return html
}

export const Markdown = memo(function Markdown({ content, className }: { content: string; className?: string }) {
  const html = markdownToHtml(content)

  if (!html) {
    return <div className={className}>{content}</div>
  }

  return <div className={className} dangerouslySetInnerHTML={{ __html: html }} />
})

export type { Markdown as MarkdownComponent }
</file>

<file path="components/theme-provider.tsx">
"use client"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import type { ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="lib/confidential-chat.ts">
export type ConfidentialChatMessage = {
  role: "user" | "assistant" | "system"
  content: string
}

export type ConfidentialChatPayload = {
  messages: ConfidentialChatMessage[]
  model?: string
  temperature?: number
  max_tokens?: number
  stream?: boolean
  reasoning_effort?: "low" | "medium" | "high"
  cache_salt?: string
}

export type ConfidentialChatOptions = {
  signal?: AbortSignal
}

export type ConfidentialChatStreamChunk =
  | { type: "delta"; content: string }
  | { type: "reasoning_delta"; reasoning_content: string }
  | { type: "done"; content: string; reasoning_content?: string; finish_reason?: string }
  | { type: "error"; error: string }

const INTERNAL_CHAT_ENDPOINT = "/api/confidential-chat"

const providerApiBase = optionalEnv(process.env.NEXT_PUBLIC_VLLM_BASE_URL)
const providerModel = optionalEnv(process.env.NEXT_PUBLIC_VLLM_MODEL)
const providerName = optionalEnv(process.env.NEXT_PUBLIC_VLLM_PROVIDER_NAME)

export async function* streamConfidentialChat(
  payload: ConfidentialChatPayload,
  options: ConfidentialChatOptions = {}
): AsyncGenerator<ConfidentialChatStreamChunk, void, unknown> {
  const response = await fetch(INTERNAL_CHAT_ENDPOINT, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      ...payload,
      stream: true,
    }),
    cache: "no-store",
    signal: options.signal,
  })

  if (!response.ok) {
    const text = await safeReadText(response)
    throw new Error(`Confidential chat API error (${response.status}): ${text || response.statusText}`)
  }

  const reader = response.body?.getReader()
  if (!reader) {
    throw new Error("Streaming is not supported in this environment.")
  }

  const decoder = new TextDecoder()
  let buffer = ""

  try {
    while (true) {
      const { value, done } = await reader.read()
      if (done) {
        buffer += decoder.decode()
        const remaining = buffer.trim()
        if (remaining) {
          yield parseStreamLine(remaining)
        }
        break
      }

      buffer += decoder.decode(value, { stream: true })
      let newlineIndex = buffer.indexOf("\n")
      while (newlineIndex >= 0) {
        const rawLine = buffer.slice(0, newlineIndex).trim()
        buffer = buffer.slice(newlineIndex + 1)
        if (rawLine) {
          yield parseStreamLine(rawLine)
        }
        newlineIndex = buffer.indexOf("\n")
      }
    }
  } finally {
    reader.releaseLock()
  }
}

export async function sendConfidentialChat(
  payload: ConfidentialChatPayload,
  options: ConfidentialChatOptions = {}
): Promise<{ message: string; reasoning_content?: string; finish_reason?: string }> {
  let message = ""
  let reasoning = ""
  let finishReason: string | undefined

  for await (const chunk of streamConfidentialChat(payload, options)) {
    if (chunk.type === "delta" && chunk.content) {
      message += chunk.content
    }

    if (chunk.type === "reasoning_delta" && chunk.reasoning_content) {
      reasoning += chunk.reasoning_content
    }

    if (chunk.type === "done") {
      if (chunk.content) {
        message = chunk.content
      }
      if (chunk.reasoning_content) {
        reasoning = chunk.reasoning_content
      }
      if (chunk.finish_reason) {
        finishReason = chunk.finish_reason
      }
    }

    if (chunk.type === "error") {
      throw new Error(chunk.error)
    }
  }

  return { message, reasoning_content: reasoning || undefined, finish_reason: finishReason }
}

export const confidentialChatConfig = {
  endpoint: INTERNAL_CHAT_ENDPOINT,
  providerApiBase,
  providerModel,
  providerName,
}

function optionalEnv(value: string | undefined) {
  if (!value) return undefined
  const trimmed = value.trim()
  return trimmed.length > 0 ? trimmed : undefined
}

async function safeReadText(response: Response) {
  try {
    return await response.text()
  } catch (error) {
    console.error("Failed to read error response", error)
    return ""
  }
}

function parseStreamLine(line: string): ConfidentialChatStreamChunk {
  if (line === "[DONE]") {
    return { type: "done", content: "" }
  }

  try {
    return JSON.parse(line) as ConfidentialChatStreamChunk
  } catch (error) {
    console.error("Failed to parse stream line", line, error)
    throw new Error("Unable to parse chat stream chunk")
  }
}
</file>

<file path="lib/system-prompt.ts">
export const systemPrompt = `You are Umbra, a secure AI assistant maintained by Concrete Security. Operate with a calm, professional tone that reflects the platform’s confidential computing guarantees. Focus exclusively on the content of documents and messages supplied by the user during this session.

Core obligations:
- Work strictly from user-provided material. If none is supplied or a question cannot be answered from it, say so and invite the user to share the relevant text.
- Keep every response concise and well-structured (sections, bullet points, short paragraphs).
- Highlight security posture when relevant: you run inside a Trusted Execution Environment (TEE) with end-to-end cryptographic protection that prevents data leakage or tampering.
- Apply advanced reasoning only to improve accuracy (e.g., chain-of-thought, extraction, summarisation). Do not expose intermediate private reasoning unless the user explicitly asks.
- Never mention OpenAI, OpenAI policies, usage policies, knowledge cutoffs, or any provider-specific governance unless the user directly requests that information. If safety guidance is required, frame it from Umbra’s perspective without referencing OpenAI.
- Refrain from speculating about events or facts outside the provided material. If clarification is needed, ask for it instead of guessing.

Example interaction: When a user shares a document excerpt and asks for key risks, produce a structured summary referencing only that excerpt. If no excerpt is given, respond along the lines of, “I don’t see any documents yet—please share the relevant text and I’ll review it securely.”`
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Light Mode: Clean, crisp, and professional */
    --background: 0 0% 100%;
    --foreground: 220 20% 12%;
    --card: 0 0% 100%;
    --card-foreground: 220 20% 12%;
    --popover: 0 0% 100%;
    --popover-foreground: 220 20% 12%;
    /* Brand: A strong, trustworthy blue */
    --primary: 210 100% 50%;
    --primary-foreground: 0 0% 100%;
    /* Subtle tinted surfaces */
    --secondary: 220 30% 96%;
    --secondary-foreground: 220 20% 25%;
    --muted: 220 30% 96%;
    --muted-foreground: 220 15% 45%;
    --accent: 220 30% 96%;
    --accent-foreground: 220 20% 25%;
    /* Feedback colors */
    --destructive: 0 84% 62%;
    --destructive-foreground: 0 0% 98%;
    --success: 140 70% 40%;
    --success-foreground: 0 0% 100%;
    /* UI chrome */
    --border: 220 20% 90%;
    --input: 220 20% 90%;
    --ring: 210 100% 50%;
    /* Sharper, more modern radius */
    --radius: 0.75rem;
  }

  .dark {
    /* Dark Mode: Deep, secure, and focused */
    --background: 220 30% 8%;
    --foreground: 220 15% 95%;
    --card: 220 30% 12%;
    --card-foreground: 220 15% 95%;
    --popover: 220 30% 8%;
    --popover-foreground: 220 15% 95%;
    /* Brand: A vibrant, electric blue for high visibility */
    --primary: 190 100% 55%;
    --primary-foreground: 220 30% 5%;
    /* Subtle tinted surfaces */
    --secondary: 220 30% 15%;
    --secondary-foreground: 220 15% 95%;
    --muted: 220 30% 15%;
    --muted-foreground: 220 10% 65%;
    --accent: 220 30% 15%;
    --accent-foreground: 220 15% 95%;
    /* Feedback colors */
    --destructive: 0 62.8% 50%;
    --destructive-foreground: 0 0% 98%;
    --success: 140 65% 50%;
    --success-foreground: 0 0% 10%;
    /* UI chrome */
    --border: 220 30% 20%;
    --input: 220 30% 20%;
    --ring: 190 100% 55%;
  }

}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-family: 'Telegraf', ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'Apple Color Emoji', 'Segoe UI Emoji';
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

.animate-in {
  animation: animate-in 0.5s ease-out;
}

@keyframes animate-in {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@layer components {
  .markdown-body {
    @apply space-y-2 break-words w-full;
  }

  .markdown-body p {
    @apply m-0 text-[0.95rem] leading-6;
  }

  .markdown-body br {
    @apply block;
  }

  .markdown-body a {
    @apply text-primary underline decoration-dashed decoration-primary/40 hover:decoration-primary;
  }

  .markdown-body ul {
    @apply list-disc pl-4 space-y-1;
  }

  .markdown-body ol {
    @apply list-decimal pl-5 space-y-1;
  }

  .markdown-body code {
    @apply rounded bg-muted px-1.5 py-0.5 text-xs font-mono;
  }

  .markdown-body pre {
    @apply m-0 bg-muted/60 px-3 py-2 text-xs font-mono leading-5 rounded-md overflow-x-auto;
  }

  .markdown-body h1,
  .markdown-body h2,
  .markdown-body h3,
  .markdown-body h4,
  .markdown-body h5,
  .markdown-body h6 {
    @apply m-0 font-semibold;
  }

  .markdown-table-wrapper {
    @apply block max-w-full overflow-x-auto;
  }

  .markdown-table {
    @apply w-full border-collapse text-sm table-fixed;
  }

  .markdown-table thead {
    @apply bg-muted/40;
  }

  .markdown-table th,
  .markdown-table td {
    @apply border border-border px-3 py-2 align-top break-words whitespace-normal;
  }

  .markdown-table .align-left {
    @apply text-left;
  }

  .markdown-table .align-center {
    @apply text-center;
  }

  .markdown-table .align-right {
    @apply text-right;
  }
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules

# next.js
/.next/
/out/

# production
/build

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

AGENTS.md
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="Makefile">
# Quick dev workflow for Concrete AI landing page

PORT ?= 3000

.PHONY: help install dev dev-open open open-when-ready build start lint clean

help:
	@echo "Make targets:"
	@echo "  make install       # Install deps (pnpm or npm)"
	@echo "  make dev           # Run dev server on PORT=$(PORT)"
	@echo "  make dev-open      # Start dev and auto-open browser when ready"
	@echo "  make open          # Open http://localhost:$(PORT) in browser"
	@echo "  make build         # Production build"
	@echo "  make start         # Start production server on PORT=$(PORT)"
	@echo "  make lint          # Run linter"
	@echo "  make clean         # Remove .next build output"

install:
	@if command -v pnpm >/dev/null 2>&1; then pnpm install; else npm install; fi

dev:
	@if command -v pnpm >/dev/null 2>&1; then PORT=$(PORT) pnpm dev; else PORT=$(PORT) npm run dev -- -p $(PORT); fi

# Start dev server and open the browser when it's reachable
dev-open:
	@$(MAKE) open-when-ready -s &
	@$(MAKE) dev -s

open-when-ready:
	@echo "Waiting for http://localhost:$(PORT) ..."; \
	until curl -sSf "http://localhost:$(PORT)" >/dev/null 2>&1; do sleep 1; done; \
	$(MAKE) open -s

open:
	@if command -v open >/dev/null 2>&1; then open "http://localhost:$(PORT)"; \
	elif command -v xdg-open >/dev/null 2>&1; then xdg-open "http://localhost:$(PORT)"; \
	elif command -v powershell.exe >/dev/null 2>&1; then powershell.exe -NoProfile -Command Start-Process "http://localhost:$(PORT)"; \
	else printf "Open manually: http://localhost:$(PORT)\n"; fi

build:
	@if command -v pnpm >/dev/null 2>&1; then pnpm build; else npm run build; fi

start:
	@if command -v pnpm >/dev/null 2>&1; then PORT=$(PORT) pnpm start; else PORT=$(PORT) npm run start; fi

lint:
	@if command -v pnpm >/dev/null 2>&1; then pnpm lint; else npm run lint; fi

clean:
	rm -rf .next
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
}

export default nextConfig
</file>

<file path="package.json">
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start"
  },
  "dependencies": {
    "@emotion/is-prop-valid": "latest",
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "latest",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "latest",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "latest",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "@vercel/analytics": "1.3.1",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "framer-motion": "latest",
    "geist": "^1.3.1",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.5.4",
    "next-themes": "latest",
    "openai": "^6.0.1",
    "pdfjs": "^2.5.4",
    "react": "^19.1.1",
    "react-day-picker": "9.8.0",
    "react-dom": "^19.1.1",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "postcss": "^8.5",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  },
  "packageManager": "pnpm@10.15.1"
}
</file>

<file path="people.json">
{
    "people": [
      {
        "name": "Prof. Christina Garman",
        "expertise": "Expert in privacy, applied cryptography, and hardware. Co-Founder of Zcash, the first privacy-preserving cryptocurrency and large-scale deployment of zero-knowledge proofs.",
        "image": "/people/christina.png"
      },
      {
        "name": "Prof. Daniel Genkin",
        "expertise": "Expert in hardware security, trusted execution environments, and side-channel attacks. Co-discoverer of Spectre and Meltdown.",
        "image": "/people/daniel.png"
      },
      {
        "name": "Dr. Jordan Frery",
        "expertise": "Leads the ML team at Zama, driving confidential-AI pipelines that keep data and models private using cutting-edge methods like homomorphic encryption. PhD in Machine Learning.",
        "image": "/people/jordan.png"
      }
    ]
  }
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
# Saas Landing Page

*Automatically synced with your [v0.app](https://v0.app) deployments*

[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black?style=for-the-badge&logo=vercel)](https://vercel.com/jordanfrery-3725s-projects/v0-saas-landing-page)
[![Built with v0](https://img.shields.io/badge/Built%20with-v0.app-black?style=for-the-badge)](https://v0.app/chat/projects/o951Eo6uxDK)

## Overview

This repository will stay in sync with your deployed chats on [v0.app](https://v0.app).
Any changes you make to your deployed app will be automatically pushed to this repository from [v0.app](https://v0.app).

## Deployment

Your project is live at:

**[https://vercel.com/jordanfrery-3725s-projects/v0-saas-landing-page](https://vercel.com/jordanfrery-3725s-projects/v0-saas-landing-page)**

## Build your app

Continue building your app on:

**[https://v0.app/chat/projects/o951Eo6uxDK](https://v0.app/chat/projects/o951Eo6uxDK)**

## How It Works

1. Create and modify your project using [v0.app](https://v0.app)
2. Deploy your chats from the v0 interface
3. Changes are automatically pushed to this repository
4. Vercel deploys the latest version from this repository

## How to launch it

- Go to: `cd ~/secure-llm/frontend`
- Install the dependancies: `pnpm install`
- Launch the project: `pnpm dev --hostname 0.0.0.0`
- Check if the port 3000 is used: `sudo ss -ltnp | grep 3000`
- You should see:

```
 Next.js 15.5.4
- Local:    http://localhost:3000
- Network:  http://10.0.0.182:3000
✓ Ready in xxms
 ○ Compiling / ...
 ✓ Compiled / in xxs (xx modules)
 GET / 200 in xxms
 ✓ Compiled in xxms (xx modules)
```

- For `Node/Next.jsa` dependancies are added to : `package.json` through `npm install openai`

## Configuration

Copy the example environment file and adjust it for your deployment:

- `cp .env.local.example .env.local`
- Verify the `VLLM_BASE_URL`/`NEXT_PUBLIC_VLLM_BASE_URL` values point to your vLLM OpenAI-compatible endpoint. The included `http://69.19.137.239:8000/v1` target assumes the daemon is listening on port 8000; update the URL if your deployment exposes a different port or protocol.
- Keep the `VLLM_API_KEY` secret. The provided `token-` value is required for the remote image shared above – replace it if you rotate credentials.
- Run `curl -H "Authorization: Bearer token-" http://69.19.137.239:8000/v1/models` (or the equivalent for your URL) to discover the available model id and update `VLLM_MODEL`/`NEXT_PUBLIC_VLLM_MODEL` accordingly.
- Update the base system prompt in `lib/system-prompt.ts` if you need a different Umbra persona. You can still override it per deployment with the `DEFAULT_SYSTEM_PROMPT` environment variable.
- Umbra now allows you to pick a reasoning intensity (low/medium/high) in the chat UI; the selection is forwarded via `reasoning_effort` to the vLLM OpenAI-compatible endpoint, so ensure your backend model accepts the corresponding parameter.

The Next.js API route reads the server-side variables (`VLLM_*`, `DEFAULT_*`) while the UI surfaces connection details using the public `NEXT_PUBLIC_VLLM_*` keys.
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        success: {
          DEFAULT: "hsl(var(--success))",
          foreground: "hsl(var(--success-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 0.25rem)",
        sm: "calc(var(--radius) - 0.5rem)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
